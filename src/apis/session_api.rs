/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SessionApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SessionApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SessionApiClient<C> {
        SessionApiClient {
            configuration: configuration,
        }
    }
}

pub trait SessionApi {
    fn create_session(&self, create_session_request: crate::models::CreateSessionRequest) -> Box<Future<Item = crate::models::Session, Error = Error<serde_json::Value>>>;
    fn end_session(&self, session_id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_session(&self, session_id: &str) -> Box<Future<Item = crate::models::Session, Error = Error<serde_json::Value>>>;
    fn refresh_session(&self, session_id: &str) -> Box<Future<Item = crate::models::Session, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>SessionApi for SessionApiClient<C> {
    fn create_session(&self, create_session_request: crate::models::CreateSessionRequest) -> Box<Future<Item = crate::models::Session, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/sessions".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_body_param(create_session_request)
            .execute(self.configuration.borrow())
    }

    fn end_session(&self, session_id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/sessions/{sessionId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_path_param("sessionId".to_string(), session_id.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_session(&self, session_id: &str) -> Box<Future<Item = crate::models::Session, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/sessions/{sessionId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_path_param("sessionId".to_string(), session_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn refresh_session(&self, session_id: &str) -> Box<Future<Item = crate::models::Session, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/sessions/{sessionId}/lifecycle/refresh".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_path_param("sessionId".to_string(), session_id.to_string())
            .execute(self.configuration.borrow())
    }

}
