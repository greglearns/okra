/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EnrollFactorRequest {
  #[serde(rename = "stateToken")]
  state_token: String,
  #[serde(rename = "factorType")]
  factor_type: crate::models::FactorType,
  #[serde(rename = "provider")]
  provider: crate::models::FactorProvider,
  #[serde(rename = "profile")]
  profile: Value
}

impl EnrollFactorRequest {
  pub fn new(state_token: String, factor_type: crate::models::FactorType, provider: crate::models::FactorProvider, profile: Value) -> EnrollFactorRequest {
    EnrollFactorRequest {
      state_token: state_token,
      factor_type: factor_type,
      provider: provider,
      profile: profile
    }
  }

  pub fn set_state_token(&mut self, state_token: String) {
    self.state_token = state_token;
  }

  pub fn with_state_token(mut self, state_token: String) -> EnrollFactorRequest {
    self.state_token = state_token;
    self
  }

  pub fn state_token(&self) -> &String {
    &self.state_token
  }


  pub fn set_factor_type(&mut self, factor_type: crate::models::FactorType) {
    self.factor_type = factor_type;
  }

  pub fn with_factor_type(mut self, factor_type: crate::models::FactorType) -> EnrollFactorRequest {
    self.factor_type = factor_type;
    self
  }

  pub fn factor_type(&self) -> &crate::models::FactorType {
    &self.factor_type
  }


  pub fn set_provider(&mut self, provider: crate::models::FactorProvider) {
    self.provider = provider;
  }

  pub fn with_provider(mut self, provider: crate::models::FactorProvider) -> EnrollFactorRequest {
    self.provider = provider;
    self
  }

  pub fn provider(&self) -> &crate::models::FactorProvider {
    &self.provider
  }


  pub fn set_profile(&mut self, profile: Value) {
    self.profile = profile;
  }

  pub fn with_profile(mut self, profile: Value) -> EnrollFactorRequest {
    self.profile = profile;
    self
  }

  pub fn profile(&self) -> &Value {
    &self.profile
  }


}



