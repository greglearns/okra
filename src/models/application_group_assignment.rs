/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationGroupAssignment {
  #[serde(rename = "_embedded")]
  _embedded: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "lastUpdated")]
  last_updated: Option<String>,
  #[serde(rename = "priority")]
  priority: Option<i32>,
  #[serde(rename = "profile")]
  profile: Option<::std::collections::HashMap<String, Value>>
}

impl ApplicationGroupAssignment {
  pub fn new() -> ApplicationGroupAssignment {
    ApplicationGroupAssignment {
      _embedded: None,
      _links: None,
      id: None,
      last_updated: None,
      priority: None,
      profile: None
    }
  }

  pub fn set_embedded(&mut self, _embedded: ::std::collections::HashMap<String, Value>) {
    self._embedded = Some(_embedded);
  }

  pub fn with_embedded(mut self, _embedded: ::std::collections::HashMap<String, Value>) -> ApplicationGroupAssignment {
    self._embedded = Some(_embedded);
    self
  }

  pub fn _embedded(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._embedded.as_ref()
  }

  pub fn reset_embedded(&mut self) {
    self._embedded = None;
  }

  pub fn set_links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with_links(mut self, _links: ::std::collections::HashMap<String, Value>) -> ApplicationGroupAssignment {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset_links(&mut self) {
    self._links = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ApplicationGroupAssignment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_last_updated(&mut self, last_updated: String) {
    self.last_updated = Some(last_updated);
  }

  pub fn with_last_updated(mut self, last_updated: String) -> ApplicationGroupAssignment {
    self.last_updated = Some(last_updated);
    self
  }

  pub fn last_updated(&self) -> Option<&String> {
    self.last_updated.as_ref()
  }

  pub fn reset_last_updated(&mut self) {
    self.last_updated = None;
  }

  pub fn set_priority(&mut self, priority: i32) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: i32) -> ApplicationGroupAssignment {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&i32> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_profile(&mut self, profile: ::std::collections::HashMap<String, Value>) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: ::std::collections::HashMap<String, Value>) -> ApplicationGroupAssignment {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

}



