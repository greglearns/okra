/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AppLink {
  #[serde(rename = "appAssignmentId")]
  app_assignment_id: Option<String>,
  #[serde(rename = "appInstanceId")]
  app_instance_id: Option<String>,
  #[serde(rename = "appName")]
  app_name: Option<String>,
  #[serde(rename = "credentialsSetup")]
  credentials_setup: Option<bool>,
  #[serde(rename = "hidden")]
  hidden: Option<bool>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "label")]
  label: Option<String>,
  #[serde(rename = "linkUrl")]
  link_url: Option<String>,
  #[serde(rename = "logoUrl")]
  logo_url: Option<String>,
  #[serde(rename = "sortOrder")]
  sort_order: Option<i32>
}

impl AppLink {
  pub fn new() -> AppLink {
    AppLink {
      app_assignment_id: None,
      app_instance_id: None,
      app_name: None,
      credentials_setup: None,
      hidden: None,
      id: None,
      label: None,
      link_url: None,
      logo_url: None,
      sort_order: None
    }
  }

  pub fn set_app_assignment_id(&mut self, app_assignment_id: String) {
    self.app_assignment_id = Some(app_assignment_id);
  }

  pub fn with_app_assignment_id(mut self, app_assignment_id: String) -> AppLink {
    self.app_assignment_id = Some(app_assignment_id);
    self
  }

  pub fn app_assignment_id(&self) -> Option<&String> {
    self.app_assignment_id.as_ref()
  }

  pub fn reset_app_assignment_id(&mut self) {
    self.app_assignment_id = None;
  }

  pub fn set_app_instance_id(&mut self, app_instance_id: String) {
    self.app_instance_id = Some(app_instance_id);
  }

  pub fn with_app_instance_id(mut self, app_instance_id: String) -> AppLink {
    self.app_instance_id = Some(app_instance_id);
    self
  }

  pub fn app_instance_id(&self) -> Option<&String> {
    self.app_instance_id.as_ref()
  }

  pub fn reset_app_instance_id(&mut self) {
    self.app_instance_id = None;
  }

  pub fn set_app_name(&mut self, app_name: String) {
    self.app_name = Some(app_name);
  }

  pub fn with_app_name(mut self, app_name: String) -> AppLink {
    self.app_name = Some(app_name);
    self
  }

  pub fn app_name(&self) -> Option<&String> {
    self.app_name.as_ref()
  }

  pub fn reset_app_name(&mut self) {
    self.app_name = None;
  }

  pub fn set_credentials_setup(&mut self, credentials_setup: bool) {
    self.credentials_setup = Some(credentials_setup);
  }

  pub fn with_credentials_setup(mut self, credentials_setup: bool) -> AppLink {
    self.credentials_setup = Some(credentials_setup);
    self
  }

  pub fn credentials_setup(&self) -> Option<&bool> {
    self.credentials_setup.as_ref()
  }

  pub fn reset_credentials_setup(&mut self) {
    self.credentials_setup = None;
  }

  pub fn set_hidden(&mut self, hidden: bool) {
    self.hidden = Some(hidden);
  }

  pub fn with_hidden(mut self, hidden: bool) -> AppLink {
    self.hidden = Some(hidden);
    self
  }

  pub fn hidden(&self) -> Option<&bool> {
    self.hidden.as_ref()
  }

  pub fn reset_hidden(&mut self) {
    self.hidden = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> AppLink {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: String) -> AppLink {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&String> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_link_url(&mut self, link_url: String) {
    self.link_url = Some(link_url);
  }

  pub fn with_link_url(mut self, link_url: String) -> AppLink {
    self.link_url = Some(link_url);
    self
  }

  pub fn link_url(&self) -> Option<&String> {
    self.link_url.as_ref()
  }

  pub fn reset_link_url(&mut self) {
    self.link_url = None;
  }

  pub fn set_logo_url(&mut self, logo_url: String) {
    self.logo_url = Some(logo_url);
  }

  pub fn with_logo_url(mut self, logo_url: String) -> AppLink {
    self.logo_url = Some(logo_url);
    self
  }

  pub fn logo_url(&self) -> Option<&String> {
    self.logo_url.as_ref()
  }

  pub fn reset_logo_url(&mut self) {
    self.logo_url = None;
  }

  pub fn set_sort_order(&mut self, sort_order: i32) {
    self.sort_order = Some(sort_order);
  }

  pub fn with_sort_order(mut self, sort_order: i32) -> AppLink {
    self.sort_order = Some(sort_order);
    self
  }

  pub fn sort_order(&self) -> Option<&i32> {
    self.sort_order.as_ref()
  }

  pub fn reset_sort_order(&mut self) {
    self.sort_order = None;
  }

}



