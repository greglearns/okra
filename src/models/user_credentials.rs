/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserCredentials {
  #[serde(rename = "emails")]
  emails: Option<Vec<crate::models::EmailAddress>>,
  #[serde(rename = "password")]
  password: Option<crate::models::PasswordCredential>,
  #[serde(rename = "provider")]
  provider: Option<crate::models::AuthenticationProvider>,
  #[serde(rename = "recovery_question")]
  recovery_question: Option<crate::models::RecoveryQuestionCredential>
}

impl UserCredentials {
  pub fn new() -> UserCredentials {
    UserCredentials {
      emails: None,
      password: None,
      provider: None,
      recovery_question: None
    }
  }

  pub fn set_emails(&mut self, emails: Vec<crate::models::EmailAddress>) {
    self.emails = Some(emails);
  }

  pub fn with_emails(mut self, emails: Vec<crate::models::EmailAddress>) -> UserCredentials {
    self.emails = Some(emails);
    self
  }

  pub fn emails(&self) -> Option<&Vec<crate::models::EmailAddress>> {
    self.emails.as_ref()
  }

  pub fn reset_emails(&mut self) {
    self.emails = None;
  }

  pub fn set_password(&mut self, password: crate::models::PasswordCredential) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: crate::models::PasswordCredential) -> UserCredentials {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&crate::models::PasswordCredential> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_provider(&mut self, provider: crate::models::AuthenticationProvider) {
    self.provider = Some(provider);
  }

  pub fn with_provider(mut self, provider: crate::models::AuthenticationProvider) -> UserCredentials {
    self.provider = Some(provider);
    self
  }

  pub fn provider(&self) -> Option<&crate::models::AuthenticationProvider> {
    self.provider.as_ref()
  }

  pub fn reset_provider(&mut self) {
    self.provider = None;
  }

  pub fn set_recovery_question(&mut self, recovery_question: crate::models::RecoveryQuestionCredential) {
    self.recovery_question = Some(recovery_question);
  }

  pub fn with_recovery_question(mut self, recovery_question: crate::models::RecoveryQuestionCredential) -> UserCredentials {
    self.recovery_question = Some(recovery_question);
    self
  }

  pub fn recovery_question(&self) -> Option<&crate::models::RecoveryQuestionCredential> {
    self.recovery_question.as_ref()
  }

  pub fn reset_recovery_question(&mut self) {
    self.recovery_question = None;
  }

}



