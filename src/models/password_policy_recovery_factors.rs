/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PasswordPolicyRecoveryFactors {
  #[serde(rename = "okta_call")]
  okta_call: Option<crate::models::PasswordPolicyRecoveryFactorSettings>,
  #[serde(rename = "okta_email")]
  okta_email: Option<crate::models::PasswordPolicyRecoveryEmail>,
  #[serde(rename = "okta_sms")]
  okta_sms: Option<crate::models::PasswordPolicyRecoveryFactorSettings>,
  #[serde(rename = "recovery_question")]
  recovery_question: Option<crate::models::PasswordPolicyRecoveryQuestion>
}

impl PasswordPolicyRecoveryFactors {
  pub fn new() -> PasswordPolicyRecoveryFactors {
    PasswordPolicyRecoveryFactors {
      okta_call: None,
      okta_email: None,
      okta_sms: None,
      recovery_question: None
    }
  }

  pub fn set_okta_call(&mut self, okta_call: crate::models::PasswordPolicyRecoveryFactorSettings) {
    self.okta_call = Some(okta_call);
  }

  pub fn with_okta_call(mut self, okta_call: crate::models::PasswordPolicyRecoveryFactorSettings) -> PasswordPolicyRecoveryFactors {
    self.okta_call = Some(okta_call);
    self
  }

  pub fn okta_call(&self) -> Option<&crate::models::PasswordPolicyRecoveryFactorSettings> {
    self.okta_call.as_ref()
  }

  pub fn reset_okta_call(&mut self) {
    self.okta_call = None;
  }

  pub fn set_okta_email(&mut self, okta_email: crate::models::PasswordPolicyRecoveryEmail) {
    self.okta_email = Some(okta_email);
  }

  pub fn with_okta_email(mut self, okta_email: crate::models::PasswordPolicyRecoveryEmail) -> PasswordPolicyRecoveryFactors {
    self.okta_email = Some(okta_email);
    self
  }

  pub fn okta_email(&self) -> Option<&crate::models::PasswordPolicyRecoveryEmail> {
    self.okta_email.as_ref()
  }

  pub fn reset_okta_email(&mut self) {
    self.okta_email = None;
  }

  pub fn set_okta_sms(&mut self, okta_sms: crate::models::PasswordPolicyRecoveryFactorSettings) {
    self.okta_sms = Some(okta_sms);
  }

  pub fn with_okta_sms(mut self, okta_sms: crate::models::PasswordPolicyRecoveryFactorSettings) -> PasswordPolicyRecoveryFactors {
    self.okta_sms = Some(okta_sms);
    self
  }

  pub fn okta_sms(&self) -> Option<&crate::models::PasswordPolicyRecoveryFactorSettings> {
    self.okta_sms.as_ref()
  }

  pub fn reset_okta_sms(&mut self) {
    self.okta_sms = None;
  }

  pub fn set_recovery_question(&mut self, recovery_question: crate::models::PasswordPolicyRecoveryQuestion) {
    self.recovery_question = Some(recovery_question);
  }

  pub fn with_recovery_question(mut self, recovery_question: crate::models::PasswordPolicyRecoveryQuestion) -> PasswordPolicyRecoveryFactors {
    self.recovery_question = Some(recovery_question);
    self
  }

  pub fn recovery_question(&self) -> Option<&crate::models::PasswordPolicyRecoveryQuestion> {
    self.recovery_question.as_ref()
  }

  pub fn reset_recovery_question(&mut self) {
    self.recovery_question = None;
  }

}



