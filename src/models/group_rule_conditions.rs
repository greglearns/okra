/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupRuleConditions {
  #[serde(rename = "expression")]
  expression: Option<crate::models::GroupRuleExpression>,
  #[serde(rename = "people")]
  people: Option<crate::models::GroupRulePeopleCondition>
}

impl GroupRuleConditions {
  pub fn new() -> GroupRuleConditions {
    GroupRuleConditions {
      expression: None,
      people: None
    }
  }

  pub fn set_expression(&mut self, expression: crate::models::GroupRuleExpression) {
    self.expression = Some(expression);
  }

  pub fn with_expression(mut self, expression: crate::models::GroupRuleExpression) -> GroupRuleConditions {
    self.expression = Some(expression);
    self
  }

  pub fn expression(&self) -> Option<&crate::models::GroupRuleExpression> {
    self.expression.as_ref()
  }

  pub fn reset_expression(&mut self) {
    self.expression = None;
  }

  pub fn set_people(&mut self, people: crate::models::GroupRulePeopleCondition) {
    self.people = Some(people);
  }

  pub fn with_people(mut self, people: crate::models::GroupRulePeopleCondition) -> GroupRuleConditions {
    self.people = Some(people);
    self
  }

  pub fn people(&self) -> Option<&crate::models::GroupRulePeopleCondition> {
    self.people.as_ref()
  }

  pub fn reset_people(&mut self) {
    self.people = None;
  }

}



