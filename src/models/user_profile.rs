/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserProfile {
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "firstName")]
  first_name: Option<String>,
  #[serde(rename = "lastName")]
  last_name: Option<String>,
  #[serde(rename = "login")]
  login: Option<String>,
  #[serde(rename = "mobilePhone")]
  mobile_phone: Option<String>,
  #[serde(rename = "secondEmail")]
  second_email: Option<String>
}

impl UserProfile {
  pub fn new() -> UserProfile {
    UserProfile {
      email: None,
      first_name: None,
      last_name: None,
      login: None,
      mobile_phone: None,
      second_email: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> UserProfile {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_first_name(&mut self, first_name: String) {
    self.first_name = Some(first_name);
  }

  pub fn with_first_name(mut self, first_name: String) -> UserProfile {
    self.first_name = Some(first_name);
    self
  }

  pub fn first_name(&self) -> Option<&String> {
    self.first_name.as_ref()
  }

  pub fn reset_first_name(&mut self) {
    self.first_name = None;
  }

  pub fn set_last_name(&mut self, last_name: String) {
    self.last_name = Some(last_name);
  }

  pub fn with_last_name(mut self, last_name: String) -> UserProfile {
    self.last_name = Some(last_name);
    self
  }

  pub fn last_name(&self) -> Option<&String> {
    self.last_name.as_ref()
  }

  pub fn reset_last_name(&mut self) {
    self.last_name = None;
  }

  pub fn set_login(&mut self, login: String) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: String) -> UserProfile {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&String> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

  pub fn set_mobile_phone(&mut self, mobile_phone: String) {
    self.mobile_phone = Some(mobile_phone);
  }

  pub fn with_mobile_phone(mut self, mobile_phone: String) -> UserProfile {
    self.mobile_phone = Some(mobile_phone);
    self
  }

  pub fn mobile_phone(&self) -> Option<&String> {
    self.mobile_phone.as_ref()
  }

  pub fn reset_mobile_phone(&mut self) {
    self.mobile_phone = None;
  }

  pub fn set_second_email(&mut self, second_email: String) {
    self.second_email = Some(second_email);
  }

  pub fn with_second_email(mut self, second_email: String) -> UserProfile {
    self.second_email = Some(second_email);
    self
  }

  pub fn second_email(&self) -> Option<&String> {
    self.second_email.as_ref()
  }

  pub fn reset_second_email(&mut self) {
    self.second_email = None;
  }

}



