/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationSettings {
  #[serde(rename = "app")]
  app: Option<Value>,
  #[serde(rename = "implicitAssignment")]
  implicit_assignment: Option<bool>,
  #[serde(rename = "notifications")]
  notifications: Option<crate::models::ApplicationSettingsNotifications>
}

impl ApplicationSettings {
  pub fn new() -> ApplicationSettings {
    ApplicationSettings {
      app: None,
      implicit_assignment: None,
      notifications: None
    }
  }

  pub fn set_app(&mut self, app: Value) {
    self.app = Some(app);
  }

  pub fn with_app(mut self, app: Value) -> ApplicationSettings {
    self.app = Some(app);
    self
  }

  pub fn app(&self) -> Option<&Value> {
    self.app.as_ref()
  }

  pub fn reset_app(&mut self) {
    self.app = None;
  }

  pub fn set_implicit_assignment(&mut self, implicit_assignment: bool) {
    self.implicit_assignment = Some(implicit_assignment);
  }

  pub fn with_implicit_assignment(mut self, implicit_assignment: bool) -> ApplicationSettings {
    self.implicit_assignment = Some(implicit_assignment);
    self
  }

  pub fn implicit_assignment(&self) -> Option<&bool> {
    self.implicit_assignment.as_ref()
  }

  pub fn reset_implicit_assignment(&mut self) {
    self.implicit_assignment = None;
  }

  pub fn set_notifications(&mut self, notifications: crate::models::ApplicationSettingsNotifications) {
    self.notifications = Some(notifications);
  }

  pub fn with_notifications(mut self, notifications: crate::models::ApplicationSettingsNotifications) -> ApplicationSettings {
    self.notifications = Some(notifications);
    self
  }

  pub fn notifications(&self) -> Option<&crate::models::ApplicationSettingsNotifications> {
    self.notifications.as_ref()
  }

  pub fn reset_notifications(&mut self) {
    self.notifications = None;
  }

}



