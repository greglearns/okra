/*
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AuthenticationRequest {
    #[serde(rename = "username")]
    username: Option<String>,
    #[serde(rename = "password")]
    password: Option<String>,
    #[serde(rename = "audience")]
    audience: Option<String>,
    #[serde(rename = "relayState")]
    relay_state: Option<String>,
    #[serde(rename = "options")]
    options: Option<crate::models::Options>,
    #[serde(rename = "context")]
    context: Option<crate::models::Context>,
    #[serde(rename = "token")]
    token: Option<String>,
    #[serde(rename = "stateToken")]
    state_token: Option<String>,
}

impl AuthenticationRequest {
    pub fn new() -> AuthenticationRequest {
        AuthenticationRequest {
            username: None,
            password: None,
            audience: None,
            relay_state: None,
            options: None,
            context: None,
            token: None,
            state_token: None,
        }
    }

    pub fn set_username(&mut self, username: String) {
        self.username = Some(username);
    }

    pub fn with_username(mut self, username: String) -> AuthenticationRequest {
        self.username = Some(username);
        self
    }

    pub fn username(&self) -> Option<&String> {
        self.username.as_ref()
    }

    pub fn reset_username(&mut self) {
        self.username = None;
    }

    pub fn set_password(&mut self, password: String) {
        self.password = Some(password);
    }

    pub fn with_password(mut self, password: String) -> AuthenticationRequest {
        self.password = Some(password);
        self
    }

    pub fn password(&self) -> Option<&String> {
        self.password.as_ref()
    }

    pub fn reset_password(&mut self) {
        self.password = None;
    }

    pub fn set_audience(&mut self, audience: String) {
        self.audience = Some(audience);
    }

    pub fn with_audience(mut self, audience: String) -> AuthenticationRequest {
        self.audience = Some(audience);
        self
    }

    pub fn audience(&self) -> Option<&String> {
        self.audience.as_ref()
    }

    pub fn reset_audience(&mut self) {
        self.audience = None;
    }

    pub fn set_relay_state(&mut self, relay_state: String) {
        self.relay_state = Some(relay_state);
    }

    pub fn with_relay_state(mut self, relay_state: String) -> AuthenticationRequest {
        self.relay_state = Some(relay_state);
        self
    }

    pub fn relay_state(&self) -> Option<&String> {
        self.relay_state.as_ref()
    }

    pub fn reset_relay_state(&mut self) {
        self.relay_state = None;
    }

    pub fn set_options(&mut self, options: crate::models::Options) {
        self.options = Some(options);
    }

    pub fn with_options(mut self, options: crate::models::Options) -> AuthenticationRequest {
        self.options = Some(options);
        self
    }

    pub fn options(&self) -> Option<&crate::models::Options> {
        self.options.as_ref()
    }

    pub fn reset_options(&mut self) {
        self.options = None;
    }

    pub fn set_context(&mut self, context: crate::models::Context) {
        self.context = Some(context);
    }

    pub fn with_context(mut self, context: crate::models::Context) -> AuthenticationRequest {
        self.context = Some(context);
        self
    }

    pub fn context(&self) -> Option<&crate::models::Context> {
        self.context.as_ref()
    }

    pub fn reset_context(&mut self) {
        self.context = None;
    }

    pub fn set_token(&mut self, token: String) {
        self.token = Some(token);
    }

    pub fn with_token(mut self, token: String) -> AuthenticationRequest {
        self.token = Some(token);
        self
    }

    pub fn token(&self) -> Option<&String> {
        self.token.as_ref()
    }

    pub fn reset_token(&mut self) {
        self.token = None;
    }

    pub fn set_state_token(&mut self, state_token: String) {
        self.state_token = Some(state_token);
    }

    pub fn with_state_token(mut self, state_token: String) -> AuthenticationRequest {
        self.state_token = Some(state_token);
        self
    }

    pub fn state_token(&self) -> Option<&String> {
        self.state_token.as_ref()
    }

    pub fn reset_state_token(&mut self) {
        self.state_token = None;
    }
}
