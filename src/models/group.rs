/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Group {
  #[serde(rename = "_embedded")]
  _embedded: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "lastMembershipUpdated")]
  last_membership_updated: Option<String>,
  #[serde(rename = "lastUpdated")]
  last_updated: Option<String>,
  #[serde(rename = "objectClass")]
  object_class: Option<Vec<String>>,
  #[serde(rename = "profile")]
  profile: Option<crate::models::GroupProfile>,
  #[serde(rename = "type")]
  _type: Option<String>
}

impl Group {
  pub fn new() -> Group {
    Group {
      _embedded: None,
      _links: None,
      created: None,
      id: None,
      last_membership_updated: None,
      last_updated: None,
      object_class: None,
      profile: None,
      _type: None
    }
  }

  pub fn set__embedded(&mut self, _embedded: ::std::collections::HashMap<String, Value>) {
    self._embedded = Some(_embedded);
  }

  pub fn with__embedded(mut self, _embedded: ::std::collections::HashMap<String, Value>) -> Group {
    self._embedded = Some(_embedded);
    self
  }

  pub fn _embedded(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._embedded.as_ref()
  }

  pub fn reset__embedded(&mut self) {
    self._embedded = None;
  }

  pub fn set__links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::std::collections::HashMap<String, Value>) -> Group {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> Group {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Group {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_last_membership_updated(&mut self, last_membership_updated: String) {
    self.last_membership_updated = Some(last_membership_updated);
  }

  pub fn with_last_membership_updated(mut self, last_membership_updated: String) -> Group {
    self.last_membership_updated = Some(last_membership_updated);
    self
  }

  pub fn last_membership_updated(&self) -> Option<&String> {
    self.last_membership_updated.as_ref()
  }

  pub fn reset_last_membership_updated(&mut self) {
    self.last_membership_updated = None;
  }

  pub fn set_last_updated(&mut self, last_updated: String) {
    self.last_updated = Some(last_updated);
  }

  pub fn with_last_updated(mut self, last_updated: String) -> Group {
    self.last_updated = Some(last_updated);
    self
  }

  pub fn last_updated(&self) -> Option<&String> {
    self.last_updated.as_ref()
  }

  pub fn reset_last_updated(&mut self) {
    self.last_updated = None;
  }

  pub fn set_object_class(&mut self, object_class: Vec<String>) {
    self.object_class = Some(object_class);
  }

  pub fn with_object_class(mut self, object_class: Vec<String>) -> Group {
    self.object_class = Some(object_class);
    self
  }

  pub fn object_class(&self) -> Option<&Vec<String>> {
    self.object_class.as_ref()
  }

  pub fn reset_object_class(&mut self) {
    self.object_class = None;
  }

  pub fn set_profile(&mut self, profile: crate::models::GroupProfile) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: crate::models::GroupProfile) -> Group {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&crate::models::GroupProfile> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> Group {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



