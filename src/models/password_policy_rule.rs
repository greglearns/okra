/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PasswordPolicyRule {
  #[serde(rename = "actions")]
  actions: Option<crate::models::PasswordPolicyRuleActions>,
  #[serde(rename = "conditions")]
  conditions: Option<crate::models::PasswordPolicyRuleConditions>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl PasswordPolicyRule {
  pub fn new() -> PasswordPolicyRule {
    PasswordPolicyRule {
      actions: None,
      conditions: None,
      name: None
    }
  }

  pub fn set_actions(&mut self, actions: crate::models::PasswordPolicyRuleActions) {
    self.actions = Some(actions);
  }

  pub fn with_actions(mut self, actions: crate::models::PasswordPolicyRuleActions) -> PasswordPolicyRule {
    self.actions = Some(actions);
    self
  }

  pub fn actions(&self) -> Option<&crate::models::PasswordPolicyRuleActions> {
    self.actions.as_ref()
  }

  pub fn reset_actions(&mut self) {
    self.actions = None;
  }

  pub fn set_conditions(&mut self, conditions: crate::models::PasswordPolicyRuleConditions) {
    self.conditions = Some(conditions);
  }

  pub fn with_conditions(mut self, conditions: crate::models::PasswordPolicyRuleConditions) -> PasswordPolicyRule {
    self.conditions = Some(conditions);
    self
  }

  pub fn conditions(&self) -> Option<&crate::models::PasswordPolicyRuleConditions> {
    self.conditions.as_ref()
  }

  pub fn reset_conditions(&mut self) {
    self.conditions = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PasswordPolicyRule {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



