/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JsonWebKey {
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "alg")]
  alg: Option<String>,
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "e")]
  e: Option<String>,
  #[serde(rename = "expiresAt")]
  expires_at: Option<String>,
  #[serde(rename = "key_ops")]
  key_ops: Option<Vec<String>>,
  #[serde(rename = "kid")]
  kid: Option<String>,
  #[serde(rename = "kty")]
  kty: Option<String>,
  #[serde(rename = "lastUpdated")]
  last_updated: Option<String>,
  #[serde(rename = "n")]
  n: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "use")]
  _use: Option<String>,
  #[serde(rename = "x5c")]
  x5c: Option<Vec<String>>,
  #[serde(rename = "x5t")]
  x5t: Option<String>,
  #[serde(rename = "x5t#S256")]
  x5t_s256: Option<String>,
  #[serde(rename = "x5u")]
  x5u: Option<String>
}

impl JsonWebKey {
  pub fn new() -> JsonWebKey {
    JsonWebKey {
      _links: None,
      alg: None,
      created: None,
      e: None,
      expires_at: None,
      key_ops: None,
      kid: None,
      kty: None,
      last_updated: None,
      n: None,
      status: None,
      _use: None,
      x5c: None,
      x5t: None,
      x5t_s256: None,
      x5u: None
    }
  }

  pub fn set__links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::std::collections::HashMap<String, Value>) -> JsonWebKey {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

  pub fn set_alg(&mut self, alg: String) {
    self.alg = Some(alg);
  }

  pub fn with_alg(mut self, alg: String) -> JsonWebKey {
    self.alg = Some(alg);
    self
  }

  pub fn alg(&self) -> Option<&String> {
    self.alg.as_ref()
  }

  pub fn reset_alg(&mut self) {
    self.alg = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> JsonWebKey {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_e(&mut self, e: String) {
    self.e = Some(e);
  }

  pub fn with_e(mut self, e: String) -> JsonWebKey {
    self.e = Some(e);
    self
  }

  pub fn e(&self) -> Option<&String> {
    self.e.as_ref()
  }

  pub fn reset_e(&mut self) {
    self.e = None;
  }

  pub fn set_expires_at(&mut self, expires_at: String) {
    self.expires_at = Some(expires_at);
  }

  pub fn with_expires_at(mut self, expires_at: String) -> JsonWebKey {
    self.expires_at = Some(expires_at);
    self
  }

  pub fn expires_at(&self) -> Option<&String> {
    self.expires_at.as_ref()
  }

  pub fn reset_expires_at(&mut self) {
    self.expires_at = None;
  }

  pub fn set_key_ops(&mut self, key_ops: Vec<String>) {
    self.key_ops = Some(key_ops);
  }

  pub fn with_key_ops(mut self, key_ops: Vec<String>) -> JsonWebKey {
    self.key_ops = Some(key_ops);
    self
  }

  pub fn key_ops(&self) -> Option<&Vec<String>> {
    self.key_ops.as_ref()
  }

  pub fn reset_key_ops(&mut self) {
    self.key_ops = None;
  }

  pub fn set_kid(&mut self, kid: String) {
    self.kid = Some(kid);
  }

  pub fn with_kid(mut self, kid: String) -> JsonWebKey {
    self.kid = Some(kid);
    self
  }

  pub fn kid(&self) -> Option<&String> {
    self.kid.as_ref()
  }

  pub fn reset_kid(&mut self) {
    self.kid = None;
  }

  pub fn set_kty(&mut self, kty: String) {
    self.kty = Some(kty);
  }

  pub fn with_kty(mut self, kty: String) -> JsonWebKey {
    self.kty = Some(kty);
    self
  }

  pub fn kty(&self) -> Option<&String> {
    self.kty.as_ref()
  }

  pub fn reset_kty(&mut self) {
    self.kty = None;
  }

  pub fn set_last_updated(&mut self, last_updated: String) {
    self.last_updated = Some(last_updated);
  }

  pub fn with_last_updated(mut self, last_updated: String) -> JsonWebKey {
    self.last_updated = Some(last_updated);
    self
  }

  pub fn last_updated(&self) -> Option<&String> {
    self.last_updated.as_ref()
  }

  pub fn reset_last_updated(&mut self) {
    self.last_updated = None;
  }

  pub fn set_n(&mut self, n: String) {
    self.n = Some(n);
  }

  pub fn with_n(mut self, n: String) -> JsonWebKey {
    self.n = Some(n);
    self
  }

  pub fn n(&self) -> Option<&String> {
    self.n.as_ref()
  }

  pub fn reset_n(&mut self) {
    self.n = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> JsonWebKey {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set__use(&mut self, _use: String) {
    self._use = Some(_use);
  }

  pub fn with__use(mut self, _use: String) -> JsonWebKey {
    self._use = Some(_use);
    self
  }

  pub fn _use(&self) -> Option<&String> {
    self._use.as_ref()
  }

  pub fn reset__use(&mut self) {
    self._use = None;
  }

  pub fn set_x5c(&mut self, x5c: Vec<String>) {
    self.x5c = Some(x5c);
  }

  pub fn with_x5c(mut self, x5c: Vec<String>) -> JsonWebKey {
    self.x5c = Some(x5c);
    self
  }

  pub fn x5c(&self) -> Option<&Vec<String>> {
    self.x5c.as_ref()
  }

  pub fn reset_x5c(&mut self) {
    self.x5c = None;
  }

  pub fn set_x5t(&mut self, x5t: String) {
    self.x5t = Some(x5t);
  }

  pub fn with_x5t(mut self, x5t: String) -> JsonWebKey {
    self.x5t = Some(x5t);
    self
  }

  pub fn x5t(&self) -> Option<&String> {
    self.x5t.as_ref()
  }

  pub fn reset_x5t(&mut self) {
    self.x5t = None;
  }

  pub fn set_x5t_s256(&mut self, x5t_s256: String) {
    self.x5t_s256 = Some(x5t_s256);
  }

  pub fn with_x5t_s256(mut self, x5t_s256: String) -> JsonWebKey {
    self.x5t_s256 = Some(x5t_s256);
    self
  }

  pub fn x5t_s256(&self) -> Option<&String> {
    self.x5t_s256.as_ref()
  }

  pub fn reset_x5t_s256(&mut self) {
    self.x5t_s256 = None;
  }

  pub fn set_x5u(&mut self, x5u: String) {
    self.x5u = Some(x5u);
  }

  pub fn with_x5u(mut self, x5u: String) -> JsonWebKey {
    self.x5u = Some(x5u);
    self
  }

  pub fn x5u(&self) -> Option<&String> {
    self.x5u.as_ref()
  }

  pub fn reset_x5u(&mut self) {
    self.x5u = None;
  }

}



