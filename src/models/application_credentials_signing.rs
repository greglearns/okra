/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationCredentialsSigning {
  #[serde(rename = "kid")]
  kid: Option<String>,
  #[serde(rename = "lastRotated")]
  last_rotated: Option<String>,
  #[serde(rename = "nextRotation")]
  next_rotation: Option<String>,
  #[serde(rename = "rotationMode")]
  rotation_mode: Option<String>
}

impl ApplicationCredentialsSigning {
  pub fn new() -> ApplicationCredentialsSigning {
    ApplicationCredentialsSigning {
      kid: None,
      last_rotated: None,
      next_rotation: None,
      rotation_mode: None
    }
  }

  pub fn set_kid(&mut self, kid: String) {
    self.kid = Some(kid);
  }

  pub fn with_kid(mut self, kid: String) -> ApplicationCredentialsSigning {
    self.kid = Some(kid);
    self
  }

  pub fn kid(&self) -> Option<&String> {
    self.kid.as_ref()
  }

  pub fn reset_kid(&mut self) {
    self.kid = None;
  }

  pub fn set_last_rotated(&mut self, last_rotated: String) {
    self.last_rotated = Some(last_rotated);
  }

  pub fn with_last_rotated(mut self, last_rotated: String) -> ApplicationCredentialsSigning {
    self.last_rotated = Some(last_rotated);
    self
  }

  pub fn last_rotated(&self) -> Option<&String> {
    self.last_rotated.as_ref()
  }

  pub fn reset_last_rotated(&mut self) {
    self.last_rotated = None;
  }

  pub fn set_next_rotation(&mut self, next_rotation: String) {
    self.next_rotation = Some(next_rotation);
  }

  pub fn with_next_rotation(mut self, next_rotation: String) -> ApplicationCredentialsSigning {
    self.next_rotation = Some(next_rotation);
    self
  }

  pub fn next_rotation(&self) -> Option<&String> {
    self.next_rotation.as_ref()
  }

  pub fn reset_next_rotation(&mut self) {
    self.next_rotation = None;
  }

  pub fn set_rotation_mode(&mut self, rotation_mode: String) {
    self.rotation_mode = Some(rotation_mode);
  }

  pub fn with_rotation_mode(mut self, rotation_mode: String) -> ApplicationCredentialsSigning {
    self.rotation_mode = Some(rotation_mode);
    self
  }

  pub fn rotation_mode(&self) -> Option<&String> {
    self.rotation_mode.as_ref()
  }

  pub fn reset_rotation_mode(&mut self) {
    self.rotation_mode = None;
  }

}



