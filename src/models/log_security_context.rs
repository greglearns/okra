/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogSecurityContext {
  #[serde(rename = "asNumber")]
  as_number: Option<i32>,
  #[serde(rename = "asOrg")]
  as_org: Option<String>,
  #[serde(rename = "domain")]
  domain: Option<String>,
  #[serde(rename = "isProxy")]
  is_proxy: Option<bool>,
  #[serde(rename = "isp")]
  isp: Option<String>
}

impl LogSecurityContext {
  pub fn new() -> LogSecurityContext {
    LogSecurityContext {
      as_number: None,
      as_org: None,
      domain: None,
      is_proxy: None,
      isp: None
    }
  }

  pub fn set_as_number(&mut self, as_number: i32) {
    self.as_number = Some(as_number);
  }

  pub fn with_as_number(mut self, as_number: i32) -> LogSecurityContext {
    self.as_number = Some(as_number);
    self
  }

  pub fn as_number(&self) -> Option<&i32> {
    self.as_number.as_ref()
  }

  pub fn reset_as_number(&mut self) {
    self.as_number = None;
  }

  pub fn set_as_org(&mut self, as_org: String) {
    self.as_org = Some(as_org);
  }

  pub fn with_as_org(mut self, as_org: String) -> LogSecurityContext {
    self.as_org = Some(as_org);
    self
  }

  pub fn as_org(&self) -> Option<&String> {
    self.as_org.as_ref()
  }

  pub fn reset_as_org(&mut self) {
    self.as_org = None;
  }

  pub fn set_domain(&mut self, domain: String) {
    self.domain = Some(domain);
  }

  pub fn with_domain(mut self, domain: String) -> LogSecurityContext {
    self.domain = Some(domain);
    self
  }

  pub fn domain(&self) -> Option<&String> {
    self.domain.as_ref()
  }

  pub fn reset_domain(&mut self) {
    self.domain = None;
  }

  pub fn set_is_proxy(&mut self, is_proxy: bool) {
    self.is_proxy = Some(is_proxy);
  }

  pub fn with_is_proxy(mut self, is_proxy: bool) -> LogSecurityContext {
    self.is_proxy = Some(is_proxy);
    self
  }

  pub fn is_proxy(&self) -> Option<&bool> {
    self.is_proxy.as_ref()
  }

  pub fn reset_is_proxy(&mut self) {
    self.is_proxy = None;
  }

  pub fn set_isp(&mut self, isp: String) {
    self.isp = Some(isp);
  }

  pub fn with_isp(mut self, isp: String) -> LogSecurityContext {
    self.isp = Some(isp);
    self
  }

  pub fn isp(&self) -> Option<&String> {
    self.isp.as_ref()
  }

  pub fn reset_isp(&mut self) {
    self.isp = None;
  }

}



