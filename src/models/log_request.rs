/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogRequest {
  #[serde(rename = "ipChain")]
  ip_chain: Option<Vec<crate::models::LogIpAddress>>
}

impl LogRequest {
  pub fn new() -> LogRequest {
    LogRequest {
      ip_chain: None
    }
  }

  pub fn set_ip_chain(&mut self, ip_chain: Vec<crate::models::LogIpAddress>) {
    self.ip_chain = Some(ip_chain);
  }

  pub fn with_ip_chain(mut self, ip_chain: Vec<crate::models::LogIpAddress>) -> LogRequest {
    self.ip_chain = Some(ip_chain);
    self
  }

  pub fn ip_chain(&self) -> Option<&Vec<crate::models::LogIpAddress>> {
    self.ip_chain.as_ref()
  }

  pub fn reset_ip_chain(&mut self) {
    self.ip_chain = None;
  }

}



