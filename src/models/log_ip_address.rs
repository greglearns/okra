/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogIpAddress {
  #[serde(rename = "geographicalContext")]
  geographical_context: Option<crate::models::LogGeographicalContext>,
  #[serde(rename = "ip")]
  ip: Option<String>,
  #[serde(rename = "source")]
  source: Option<String>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl LogIpAddress {
  pub fn new() -> LogIpAddress {
    LogIpAddress {
      geographical_context: None,
      ip: None,
      source: None,
      version: None
    }
  }

  pub fn set_geographical_context(&mut self, geographical_context: crate::models::LogGeographicalContext) {
    self.geographical_context = Some(geographical_context);
  }

  pub fn with_geographical_context(mut self, geographical_context: crate::models::LogGeographicalContext) -> LogIpAddress {
    self.geographical_context = Some(geographical_context);
    self
  }

  pub fn geographical_context(&self) -> Option<&crate::models::LogGeographicalContext> {
    self.geographical_context.as_ref()
  }

  pub fn reset_geographical_context(&mut self) {
    self.geographical_context = None;
  }

  pub fn set_ip(&mut self, ip: String) {
    self.ip = Some(ip);
  }

  pub fn with_ip(mut self, ip: String) -> LogIpAddress {
    self.ip = Some(ip);
    self
  }

  pub fn ip(&self) -> Option<&String> {
    self.ip.as_ref()
  }

  pub fn reset_ip(&mut self) {
    self.ip = None;
  }

  pub fn set_source(&mut self, source: String) {
    self.source = Some(source);
  }

  pub fn with_source(mut self, source: String) -> LogIpAddress {
    self.source = Some(source);
    self
  }

  pub fn source(&self) -> Option<&String> {
    self.source.as_ref()
  }

  pub fn reset_source(&mut self) {
    self.source = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> LogIpAddress {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



