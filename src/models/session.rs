/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Session {
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "amr")]
  amr: Option<Vec<crate::models::SessionAuthenticationMethod>>,
  #[serde(rename = "createdAt")]
  created_at: Option<String>,
  #[serde(rename = "expiresAt")]
  expires_at: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "idp")]
  idp: Option<crate::models::SessionIdentityProvider>,
  #[serde(rename = "lastFactorVerification")]
  last_factor_verification: Option<String>,
  #[serde(rename = "lastPasswordVerification")]
  last_password_verification: Option<String>,
  #[serde(rename = "login")]
  login: Option<String>,
  #[serde(rename = "status")]
  status: Option<crate::models::SessionStatus>,
  #[serde(rename = "userId")]
  user_id: Option<String>
}

impl Session {
  pub fn new() -> Session {
    Session {
      _links: None,
      amr: None,
      created_at: None,
      expires_at: None,
      id: None,
      idp: None,
      last_factor_verification: None,
      last_password_verification: None,
      login: None,
      status: None,
      user_id: None
    }
  }

  pub fn set_links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with_links(mut self, _links: ::std::collections::HashMap<String, Value>) -> Session {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset_links(&mut self) {
    self._links = None;
  }

  pub fn set_amr(&mut self, amr: Vec<crate::models::SessionAuthenticationMethod>) {
    self.amr = Some(amr);
  }

  pub fn with_amr(mut self, amr: Vec<crate::models::SessionAuthenticationMethod>) -> Session {
    self.amr = Some(amr);
    self
  }

  pub fn amr(&self) -> Option<&Vec<crate::models::SessionAuthenticationMethod>> {
    self.amr.as_ref()
  }

  pub fn reset_amr(&mut self) {
    self.amr = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Session {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_expires_at(&mut self, expires_at: String) {
    self.expires_at = Some(expires_at);
  }

  pub fn with_expires_at(mut self, expires_at: String) -> Session {
    self.expires_at = Some(expires_at);
    self
  }

  pub fn expires_at(&self) -> Option<&String> {
    self.expires_at.as_ref()
  }

  pub fn reset_expires_at(&mut self) {
    self.expires_at = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Session {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_idp(&mut self, idp: crate::models::SessionIdentityProvider) {
    self.idp = Some(idp);
  }

  pub fn with_idp(mut self, idp: crate::models::SessionIdentityProvider) -> Session {
    self.idp = Some(idp);
    self
  }

  pub fn idp(&self) -> Option<&crate::models::SessionIdentityProvider> {
    self.idp.as_ref()
  }

  pub fn reset_idp(&mut self) {
    self.idp = None;
  }

  pub fn set_last_factor_verification(&mut self, last_factor_verification: String) {
    self.last_factor_verification = Some(last_factor_verification);
  }

  pub fn with_last_factor_verification(mut self, last_factor_verification: String) -> Session {
    self.last_factor_verification = Some(last_factor_verification);
    self
  }

  pub fn last_factor_verification(&self) -> Option<&String> {
    self.last_factor_verification.as_ref()
  }

  pub fn reset_last_factor_verification(&mut self) {
    self.last_factor_verification = None;
  }

  pub fn set_last_password_verification(&mut self, last_password_verification: String) {
    self.last_password_verification = Some(last_password_verification);
  }

  pub fn with_last_password_verification(mut self, last_password_verification: String) -> Session {
    self.last_password_verification = Some(last_password_verification);
    self
  }

  pub fn last_password_verification(&self) -> Option<&String> {
    self.last_password_verification.as_ref()
  }

  pub fn reset_last_password_verification(&mut self) {
    self.last_password_verification = None;
  }

  pub fn set_login(&mut self, login: String) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: String) -> Session {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&String> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

  pub fn set_status(&mut self, status: crate::models::SessionStatus) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: crate::models::SessionStatus) -> Session {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&crate::models::SessionStatus> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_user_id(&mut self, user_id: String) {
    self.user_id = Some(user_id);
  }

  pub fn with_user_id(mut self, user_id: String) -> Session {
    self.user_id = Some(user_id);
    self
  }

  pub fn user_id(&self) -> Option<&String> {
    self.user_id.as_ref()
  }

  pub fn reset_user_id(&mut self) {
    self.user_id = None;
  }

}



