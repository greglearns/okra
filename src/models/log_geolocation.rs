/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogGeolocation {
  #[serde(rename = "lat")]
  lat: Option<f64>,
  #[serde(rename = "lon")]
  lon: Option<f64>
}

impl LogGeolocation {
  pub fn new() -> LogGeolocation {
    LogGeolocation {
      lat: None,
      lon: None
    }
  }

  pub fn set_lat(&mut self, lat: f64) {
    self.lat = Some(lat);
  }

  pub fn with_lat(mut self, lat: f64) -> LogGeolocation {
    self.lat = Some(lat);
    self
  }

  pub fn lat(&self) -> Option<&f64> {
    self.lat.as_ref()
  }

  pub fn reset_lat(&mut self) {
    self.lat = None;
  }

  pub fn set_lon(&mut self, lon: f64) {
    self.lon = Some(lon);
  }

  pub fn with_lon(mut self, lon: f64) -> LogGeolocation {
    self.lon = Some(lon);
    self
  }

  pub fn lon(&self) -> Option<&f64> {
    self.lon.as_ref()
  }

  pub fn reset_lon(&mut self) {
    self.lon = None;
  }

}



