/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PasswordPolicyRuleConditions {
  #[serde(rename = "network")]
  network: Option<crate::models::PolicyNetworkCondition>,
  #[serde(rename = "people")]
  people: Option<crate::models::PolicyPeopleCondition>
}

impl PasswordPolicyRuleConditions {
  pub fn new() -> PasswordPolicyRuleConditions {
    PasswordPolicyRuleConditions {
      network: None,
      people: None
    }
  }

  pub fn set_network(&mut self, network: crate::models::PolicyNetworkCondition) {
    self.network = Some(network);
  }

  pub fn with_network(mut self, network: crate::models::PolicyNetworkCondition) -> PasswordPolicyRuleConditions {
    self.network = Some(network);
    self
  }

  pub fn network(&self) -> Option<&crate::models::PolicyNetworkCondition> {
    self.network.as_ref()
  }

  pub fn reset_network(&mut self) {
    self.network = None;
  }

  pub fn set_people(&mut self, people: crate::models::PolicyPeopleCondition) {
    self.people = Some(people);
  }

  pub fn with_people(mut self, people: crate::models::PolicyPeopleCondition) -> PasswordPolicyRuleConditions {
    self.people = Some(people);
    self
  }

  pub fn people(&self) -> Option<&crate::models::PolicyPeopleCondition> {
    self.people.as_ref()
  }

  pub fn reset_people(&mut self) {
    self.people = None;
  }

}



