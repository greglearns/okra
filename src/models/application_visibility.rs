/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationVisibility {
  #[serde(rename = "appLinks")]
  app_links: Option<::std::collections::HashMap<String, bool>>,
  #[serde(rename = "autoSubmitToolbar")]
  auto_submit_toolbar: Option<bool>,
  #[serde(rename = "hide")]
  hide: Option<crate::models::ApplicationVisibilityHide>
}

impl ApplicationVisibility {
  pub fn new() -> ApplicationVisibility {
    ApplicationVisibility {
      app_links: None,
      auto_submit_toolbar: None,
      hide: None
    }
  }

  pub fn set_app_links(&mut self, app_links: ::std::collections::HashMap<String, bool>) {
    self.app_links = Some(app_links);
  }

  pub fn with_app_links(mut self, app_links: ::std::collections::HashMap<String, bool>) -> ApplicationVisibility {
    self.app_links = Some(app_links);
    self
  }

  pub fn app_links(&self) -> Option<&::std::collections::HashMap<String, bool>> {
    self.app_links.as_ref()
  }

  pub fn reset_app_links(&mut self) {
    self.app_links = None;
  }

  pub fn set_auto_submit_toolbar(&mut self, auto_submit_toolbar: bool) {
    self.auto_submit_toolbar = Some(auto_submit_toolbar);
  }

  pub fn with_auto_submit_toolbar(mut self, auto_submit_toolbar: bool) -> ApplicationVisibility {
    self.auto_submit_toolbar = Some(auto_submit_toolbar);
    self
  }

  pub fn auto_submit_toolbar(&self) -> Option<&bool> {
    self.auto_submit_toolbar.as_ref()
  }

  pub fn reset_auto_submit_toolbar(&mut self) {
    self.auto_submit_toolbar = None;
  }

  pub fn set_hide(&mut self, hide: crate::models::ApplicationVisibilityHide) {
    self.hide = Some(hide);
  }

  pub fn with_hide(mut self, hide: crate::models::ApplicationVisibilityHide) -> ApplicationVisibility {
    self.hide = Some(hide);
    self
  }

  pub fn hide(&self) -> Option<&crate::models::ApplicationVisibilityHide> {
    self.hide.as_ref()
  }

  pub fn reset_hide(&mut self) {
    self.hide = None;
  }

}



