/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwaApplicationSettingsApplication {
  #[serde(rename = "buttonField")]
  button_field: Option<String>,
  #[serde(rename = "loginUrlRegex")]
  login_url_regex: Option<String>,
  #[serde(rename = "passwordField")]
  password_field: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "usernameField")]
  username_field: Option<String>
}

impl SwaApplicationSettingsApplication {
  pub fn new() -> SwaApplicationSettingsApplication {
    SwaApplicationSettingsApplication {
      button_field: None,
      login_url_regex: None,
      password_field: None,
      url: None,
      username_field: None
    }
  }

  pub fn set_button_field(&mut self, button_field: String) {
    self.button_field = Some(button_field);
  }

  pub fn with_button_field(mut self, button_field: String) -> SwaApplicationSettingsApplication {
    self.button_field = Some(button_field);
    self
  }

  pub fn button_field(&self) -> Option<&String> {
    self.button_field.as_ref()
  }

  pub fn reset_button_field(&mut self) {
    self.button_field = None;
  }

  pub fn set_login_url_regex(&mut self, login_url_regex: String) {
    self.login_url_regex = Some(login_url_regex);
  }

  pub fn with_login_url_regex(mut self, login_url_regex: String) -> SwaApplicationSettingsApplication {
    self.login_url_regex = Some(login_url_regex);
    self
  }

  pub fn login_url_regex(&self) -> Option<&String> {
    self.login_url_regex.as_ref()
  }

  pub fn reset_login_url_regex(&mut self) {
    self.login_url_regex = None;
  }

  pub fn set_password_field(&mut self, password_field: String) {
    self.password_field = Some(password_field);
  }

  pub fn with_password_field(mut self, password_field: String) -> SwaApplicationSettingsApplication {
    self.password_field = Some(password_field);
    self
  }

  pub fn password_field(&self) -> Option<&String> {
    self.password_field.as_ref()
  }

  pub fn reset_password_field(&mut self) {
    self.password_field = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> SwaApplicationSettingsApplication {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_username_field(&mut self, username_field: String) {
    self.username_field = Some(username_field);
  }

  pub fn with_username_field(mut self, username_field: String) -> SwaApplicationSettingsApplication {
    self.username_field = Some(username_field);
    self
  }

  pub fn username_field(&self) -> Option<&String> {
    self.username_field.as_ref()
  }

  pub fn reset_username_field(&mut self) {
    self.username_field = None;
  }

}



