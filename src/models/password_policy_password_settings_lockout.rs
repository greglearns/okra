/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PasswordPolicyPasswordSettingsLockout {
  #[serde(rename = "autoUnlockMinutes")]
  auto_unlock_minutes: Option<i32>,
  #[serde(rename = "maxAttempts")]
  max_attempts: Option<i32>,
  #[serde(rename = "showLockoutFailures")]
  show_lockout_failures: Option<bool>,
  #[serde(rename = "userLockoutNotificationChannels")]
  user_lockout_notification_channels: Option<Vec<String>>
}

impl PasswordPolicyPasswordSettingsLockout {
  pub fn new() -> PasswordPolicyPasswordSettingsLockout {
    PasswordPolicyPasswordSettingsLockout {
      auto_unlock_minutes: None,
      max_attempts: None,
      show_lockout_failures: None,
      user_lockout_notification_channels: None
    }
  }

  pub fn set_auto_unlock_minutes(&mut self, auto_unlock_minutes: i32) {
    self.auto_unlock_minutes = Some(auto_unlock_minutes);
  }

  pub fn with_auto_unlock_minutes(mut self, auto_unlock_minutes: i32) -> PasswordPolicyPasswordSettingsLockout {
    self.auto_unlock_minutes = Some(auto_unlock_minutes);
    self
  }

  pub fn auto_unlock_minutes(&self) -> Option<&i32> {
    self.auto_unlock_minutes.as_ref()
  }

  pub fn reset_auto_unlock_minutes(&mut self) {
    self.auto_unlock_minutes = None;
  }

  pub fn set_max_attempts(&mut self, max_attempts: i32) {
    self.max_attempts = Some(max_attempts);
  }

  pub fn with_max_attempts(mut self, max_attempts: i32) -> PasswordPolicyPasswordSettingsLockout {
    self.max_attempts = Some(max_attempts);
    self
  }

  pub fn max_attempts(&self) -> Option<&i32> {
    self.max_attempts.as_ref()
  }

  pub fn reset_max_attempts(&mut self) {
    self.max_attempts = None;
  }

  pub fn set_show_lockout_failures(&mut self, show_lockout_failures: bool) {
    self.show_lockout_failures = Some(show_lockout_failures);
  }

  pub fn with_show_lockout_failures(mut self, show_lockout_failures: bool) -> PasswordPolicyPasswordSettingsLockout {
    self.show_lockout_failures = Some(show_lockout_failures);
    self
  }

  pub fn show_lockout_failures(&self) -> Option<&bool> {
    self.show_lockout_failures.as_ref()
  }

  pub fn reset_show_lockout_failures(&mut self) {
    self.show_lockout_failures = None;
  }

  pub fn set_user_lockout_notification_channels(&mut self, user_lockout_notification_channels: Vec<String>) {
    self.user_lockout_notification_channels = Some(user_lockout_notification_channels);
  }

  pub fn with_user_lockout_notification_channels(mut self, user_lockout_notification_channels: Vec<String>) -> PasswordPolicyPasswordSettingsLockout {
    self.user_lockout_notification_channels = Some(user_lockout_notification_channels);
    self
  }

  pub fn user_lockout_notification_channels(&self) -> Option<&Vec<String>> {
    self.user_lockout_notification_channels.as_ref()
  }

  pub fn reset_user_lockout_notification_channels(&mut self) {
    self.user_lockout_notification_channels = None;
  }

}



