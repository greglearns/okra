/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationCredentialsUsernameTemplate {
  #[serde(rename = "suffix")]
  suffix: Option<String>,
  #[serde(rename = "template")]
  template: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>
}

impl ApplicationCredentialsUsernameTemplate {
  pub fn new() -> ApplicationCredentialsUsernameTemplate {
    ApplicationCredentialsUsernameTemplate {
      suffix: None,
      template: None,
      _type: None
    }
  }

  pub fn set_suffix(&mut self, suffix: String) {
    self.suffix = Some(suffix);
  }

  pub fn with_suffix(mut self, suffix: String) -> ApplicationCredentialsUsernameTemplate {
    self.suffix = Some(suffix);
    self
  }

  pub fn suffix(&self) -> Option<&String> {
    self.suffix.as_ref()
  }

  pub fn reset_suffix(&mut self) {
    self.suffix = None;
  }

  pub fn set_template(&mut self, template: String) {
    self.template = Some(template);
  }

  pub fn with_template(mut self, template: String) -> ApplicationCredentialsUsernameTemplate {
    self.template = Some(template);
    self
  }

  pub fn template(&self) -> Option<&String> {
    self.template.as_ref()
  }

  pub fn reset_template(&mut self) {
    self.template = None;
  }

  pub fn set_type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with_type(mut self, _type: String) -> ApplicationCredentialsUsernameTemplate {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset_type(&mut self) {
    self._type = None;
  }

}



