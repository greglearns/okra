/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct VerifyFactorResponse {
  #[serde(rename = "_embedded")]
  _embedded: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "expiresAt")]
  expires_at: Option<String>,
  #[serde(rename = "factorResult")]
  factor_result: Option<crate::models::FactorResultType>,
  #[serde(rename = "factorResultMessage")]
  factor_result_message: Option<String>
}

impl VerifyFactorResponse {
  pub fn new() -> VerifyFactorResponse {
    VerifyFactorResponse {
      _embedded: None,
      _links: None,
      expires_at: None,
      factor_result: None,
      factor_result_message: None
    }
  }

  pub fn set__embedded(&mut self, _embedded: ::std::collections::HashMap<String, Value>) {
    self._embedded = Some(_embedded);
  }

  pub fn with__embedded(mut self, _embedded: ::std::collections::HashMap<String, Value>) -> VerifyFactorResponse {
    self._embedded = Some(_embedded);
    self
  }

  pub fn _embedded(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._embedded.as_ref()
  }

  pub fn reset__embedded(&mut self) {
    self._embedded = None;
  }

  pub fn set__links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::std::collections::HashMap<String, Value>) -> VerifyFactorResponse {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

  pub fn set_expires_at(&mut self, expires_at: String) {
    self.expires_at = Some(expires_at);
  }

  pub fn with_expires_at(mut self, expires_at: String) -> VerifyFactorResponse {
    self.expires_at = Some(expires_at);
    self
  }

  pub fn expires_at(&self) -> Option<&String> {
    self.expires_at.as_ref()
  }

  pub fn reset_expires_at(&mut self) {
    self.expires_at = None;
  }

  pub fn set_factor_result(&mut self, factor_result: crate::models::FactorResultType) {
    self.factor_result = Some(factor_result);
  }

  pub fn with_factor_result(mut self, factor_result: crate::models::FactorResultType) -> VerifyFactorResponse {
    self.factor_result = Some(factor_result);
    self
  }

  pub fn factor_result(&self) -> Option<&crate::models::FactorResultType> {
    self.factor_result.as_ref()
  }

  pub fn reset_factor_result(&mut self) {
    self.factor_result = None;
  }

  pub fn set_factor_result_message(&mut self, factor_result_message: String) {
    self.factor_result_message = Some(factor_result_message);
  }

  pub fn with_factor_result_message(mut self, factor_result_message: String) -> VerifyFactorResponse {
    self.factor_result_message = Some(factor_result_message);
    self
  }

  pub fn factor_result_message(&self) -> Option<&String> {
    self.factor_result_message.as_ref()
  }

  pub fn reset_factor_result_message(&mut self) {
    self.factor_result_message = None;
  }

}



