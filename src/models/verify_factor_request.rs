/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct VerifyFactorRequest {
  #[serde(rename = "activationToken")]
  activation_token: Option<String>,
  #[serde(rename = "answer")]
  answer: Option<String>,
  #[serde(rename = "nextPassCode")]
  next_pass_code: Option<String>,
  #[serde(rename = "passCode")]
  pass_code: Option<String>,
  #[serde(rename = "tokenLifetimeSeconds")]
  token_lifetime_seconds: Option<i32>
}

impl VerifyFactorRequest {
  pub fn new() -> VerifyFactorRequest {
    VerifyFactorRequest {
      activation_token: None,
      answer: None,
      next_pass_code: None,
      pass_code: None,
      token_lifetime_seconds: None
    }
  }

  pub fn set_activation_token(&mut self, activation_token: String) {
    self.activation_token = Some(activation_token);
  }

  pub fn with_activation_token(mut self, activation_token: String) -> VerifyFactorRequest {
    self.activation_token = Some(activation_token);
    self
  }

  pub fn activation_token(&self) -> Option<&String> {
    self.activation_token.as_ref()
  }

  pub fn reset_activation_token(&mut self) {
    self.activation_token = None;
  }

  pub fn set_answer(&mut self, answer: String) {
    self.answer = Some(answer);
  }

  pub fn with_answer(mut self, answer: String) -> VerifyFactorRequest {
    self.answer = Some(answer);
    self
  }

  pub fn answer(&self) -> Option<&String> {
    self.answer.as_ref()
  }

  pub fn reset_answer(&mut self) {
    self.answer = None;
  }

  pub fn set_next_pass_code(&mut self, next_pass_code: String) {
    self.next_pass_code = Some(next_pass_code);
  }

  pub fn with_next_pass_code(mut self, next_pass_code: String) -> VerifyFactorRequest {
    self.next_pass_code = Some(next_pass_code);
    self
  }

  pub fn next_pass_code(&self) -> Option<&String> {
    self.next_pass_code.as_ref()
  }

  pub fn reset_next_pass_code(&mut self) {
    self.next_pass_code = None;
  }

  pub fn set_pass_code(&mut self, pass_code: String) {
    self.pass_code = Some(pass_code);
  }

  pub fn with_pass_code(mut self, pass_code: String) -> VerifyFactorRequest {
    self.pass_code = Some(pass_code);
    self
  }

  pub fn pass_code(&self) -> Option<&String> {
    self.pass_code.as_ref()
  }

  pub fn reset_pass_code(&mut self) {
    self.pass_code = None;
  }

  pub fn set_token_lifetime_seconds(&mut self, token_lifetime_seconds: i32) {
    self.token_lifetime_seconds = Some(token_lifetime_seconds);
  }

  pub fn with_token_lifetime_seconds(mut self, token_lifetime_seconds: i32) -> VerifyFactorRequest {
    self.token_lifetime_seconds = Some(token_lifetime_seconds);
    self
  }

  pub fn token_lifetime_seconds(&self) -> Option<&i32> {
    self.token_lifetime_seconds.as_ref()
  }

  pub fn reset_token_lifetime_seconds(&mut self) {
    self.token_lifetime_seconds = None;
  }

}



