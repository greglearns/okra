/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogClient {
  #[serde(rename = "device")]
  device: Option<String>,
  #[serde(rename = "geographicalContext")]
  geographical_context: Option<crate::models::LogGeographicalContext>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "ipAddress")]
  ip_address: Option<String>,
  #[serde(rename = "userAgent")]
  user_agent: Option<crate::models::LogUserAgent>,
  #[serde(rename = "zone")]
  zone: Option<String>
}

impl LogClient {
  pub fn new() -> LogClient {
    LogClient {
      device: None,
      geographical_context: None,
      id: None,
      ip_address: None,
      user_agent: None,
      zone: None
    }
  }

  pub fn set_device(&mut self, device: String) {
    self.device = Some(device);
  }

  pub fn with_device(mut self, device: String) -> LogClient {
    self.device = Some(device);
    self
  }

  pub fn device(&self) -> Option<&String> {
    self.device.as_ref()
  }

  pub fn reset_device(&mut self) {
    self.device = None;
  }

  pub fn set_geographical_context(&mut self, geographical_context: crate::models::LogGeographicalContext) {
    self.geographical_context = Some(geographical_context);
  }

  pub fn with_geographical_context(mut self, geographical_context: crate::models::LogGeographicalContext) -> LogClient {
    self.geographical_context = Some(geographical_context);
    self
  }

  pub fn geographical_context(&self) -> Option<&crate::models::LogGeographicalContext> {
    self.geographical_context.as_ref()
  }

  pub fn reset_geographical_context(&mut self) {
    self.geographical_context = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> LogClient {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_ip_address(&mut self, ip_address: String) {
    self.ip_address = Some(ip_address);
  }

  pub fn with_ip_address(mut self, ip_address: String) -> LogClient {
    self.ip_address = Some(ip_address);
    self
  }

  pub fn ip_address(&self) -> Option<&String> {
    self.ip_address.as_ref()
  }

  pub fn reset_ip_address(&mut self) {
    self.ip_address = None;
  }

  pub fn set_user_agent(&mut self, user_agent: crate::models::LogUserAgent) {
    self.user_agent = Some(user_agent);
  }

  pub fn with_user_agent(mut self, user_agent: crate::models::LogUserAgent) -> LogClient {
    self.user_agent = Some(user_agent);
    self
  }

  pub fn user_agent(&self) -> Option<&crate::models::LogUserAgent> {
    self.user_agent.as_ref()
  }

  pub fn reset_user_agent(&mut self) {
    self.user_agent = None;
  }

  pub fn set_zone(&mut self, zone: String) {
    self.zone = Some(zone);
  }

  pub fn with_zone(mut self, zone: String) -> LogClient {
    self.zone = Some(zone);
    self
  }

  pub fn zone(&self) -> Option<&String> {
    self.zone.as_ref()
  }

  pub fn reset_zone(&mut self) {
    self.zone = None;
  }

}



