/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserActivationToken {
  #[serde(rename = "activationToken")]
  activation_token: Option<String>,
  #[serde(rename = "activationUrl")]
  activation_url: Option<String>
}

impl UserActivationToken {
  pub fn new() -> UserActivationToken {
    UserActivationToken {
      activation_token: None,
      activation_url: None
    }
  }

  pub fn set_activation_token(&mut self, activation_token: String) {
    self.activation_token = Some(activation_token);
  }

  pub fn with_activation_token(mut self, activation_token: String) -> UserActivationToken {
    self.activation_token = Some(activation_token);
    self
  }

  pub fn activation_token(&self) -> Option<&String> {
    self.activation_token.as_ref()
  }

  pub fn reset_activation_token(&mut self) {
    self.activation_token = None;
  }

  pub fn set_activation_url(&mut self, activation_url: String) {
    self.activation_url = Some(activation_url);
  }

  pub fn with_activation_url(mut self, activation_url: String) -> UserActivationToken {
    self.activation_url = Some(activation_url);
    self
  }

  pub fn activation_url(&self) -> Option<&String> {
    self.activation_url.as_ref()
  }

  pub fn reset_activation_url(&mut self) {
    self.activation_url = None;
  }

}



