/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupRuleAction {
  #[serde(rename = "assignUserToGroups")]
  assign_user_to_groups: Option<crate::models::GroupRuleGroupAssignment>
}

impl GroupRuleAction {
  pub fn new() -> GroupRuleAction {
    GroupRuleAction {
      assign_user_to_groups: None
    }
  }

  pub fn set_assign_user_to_groups(&mut self, assign_user_to_groups: crate::models::GroupRuleGroupAssignment) {
    self.assign_user_to_groups = Some(assign_user_to_groups);
  }

  pub fn with_assign_user_to_groups(mut self, assign_user_to_groups: crate::models::GroupRuleGroupAssignment) -> GroupRuleAction {
    self.assign_user_to_groups = Some(assign_user_to_groups);
    self
  }

  pub fn assign_user_to_groups(&self) -> Option<&crate::models::GroupRuleGroupAssignment> {
    self.assign_user_to_groups.as_ref()
  }

  pub fn reset_assign_user_to_groups(&mut self) {
    self.assign_user_to_groups = None;
  }

}



