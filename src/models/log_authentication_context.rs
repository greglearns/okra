/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogAuthenticationContext {
  #[serde(rename = "authenticationProvider")]
  authentication_provider: Option<crate::models::LogAuthenticationProvider>,
  #[serde(rename = "authenticationStep")]
  authentication_step: Option<i32>,
  #[serde(rename = "credentialProvider")]
  credential_provider: Option<Vec<crate::models::LogCredentialProvider>>,
  #[serde(rename = "credentialType")]
  credential_type: Option<Vec<crate::models::LogCredentialType>>,
  #[serde(rename = "externalSessionId")]
  external_session_id: Option<String>,
  #[serde(rename = "interface")]
  interface: Option<String>,
  #[serde(rename = "issuer")]
  issuer: Option<crate::models::LogIssuer>
}

impl LogAuthenticationContext {
  pub fn new() -> LogAuthenticationContext {
    LogAuthenticationContext {
      authentication_provider: None,
      authentication_step: None,
      credential_provider: None,
      credential_type: None,
      external_session_id: None,
      interface: None,
      issuer: None
    }
  }

  pub fn set_authentication_provider(&mut self, authentication_provider: crate::models::LogAuthenticationProvider) {
    self.authentication_provider = Some(authentication_provider);
  }

  pub fn with_authentication_provider(mut self, authentication_provider: crate::models::LogAuthenticationProvider) -> LogAuthenticationContext {
    self.authentication_provider = Some(authentication_provider);
    self
  }

  pub fn authentication_provider(&self) -> Option<&crate::models::LogAuthenticationProvider> {
    self.authentication_provider.as_ref()
  }

  pub fn reset_authentication_provider(&mut self) {
    self.authentication_provider = None;
  }

  pub fn set_authentication_step(&mut self, authentication_step: i32) {
    self.authentication_step = Some(authentication_step);
  }

  pub fn with_authentication_step(mut self, authentication_step: i32) -> LogAuthenticationContext {
    self.authentication_step = Some(authentication_step);
    self
  }

  pub fn authentication_step(&self) -> Option<&i32> {
    self.authentication_step.as_ref()
  }

  pub fn reset_authentication_step(&mut self) {
    self.authentication_step = None;
  }

  pub fn set_credential_provider(&mut self, credential_provider: Vec<crate::models::LogCredentialProvider>) {
    self.credential_provider = Some(credential_provider);
  }

  pub fn with_credential_provider(mut self, credential_provider: Vec<crate::models::LogCredentialProvider>) -> LogAuthenticationContext {
    self.credential_provider = Some(credential_provider);
    self
  }

  pub fn credential_provider(&self) -> Option<&Vec<crate::models::LogCredentialProvider>> {
    self.credential_provider.as_ref()
  }

  pub fn reset_credential_provider(&mut self) {
    self.credential_provider = None;
  }

  pub fn set_credential_type(&mut self, credential_type: Vec<crate::models::LogCredentialType>) {
    self.credential_type = Some(credential_type);
  }

  pub fn with_credential_type(mut self, credential_type: Vec<crate::models::LogCredentialType>) -> LogAuthenticationContext {
    self.credential_type = Some(credential_type);
    self
  }

  pub fn credential_type(&self) -> Option<&Vec<crate::models::LogCredentialType>> {
    self.credential_type.as_ref()
  }

  pub fn reset_credential_type(&mut self) {
    self.credential_type = None;
  }

  pub fn set_external_session_id(&mut self, external_session_id: String) {
    self.external_session_id = Some(external_session_id);
  }

  pub fn with_external_session_id(mut self, external_session_id: String) -> LogAuthenticationContext {
    self.external_session_id = Some(external_session_id);
    self
  }

  pub fn external_session_id(&self) -> Option<&String> {
    self.external_session_id.as_ref()
  }

  pub fn reset_external_session_id(&mut self) {
    self.external_session_id = None;
  }

  pub fn set_interface(&mut self, interface: String) {
    self.interface = Some(interface);
  }

  pub fn with_interface(mut self, interface: String) -> LogAuthenticationContext {
    self.interface = Some(interface);
    self
  }

  pub fn interface(&self) -> Option<&String> {
    self.interface.as_ref()
  }

  pub fn reset_interface(&mut self) {
    self.interface = None;
  }

  pub fn set_issuer(&mut self, issuer: crate::models::LogIssuer) {
    self.issuer = Some(issuer);
  }

  pub fn with_issuer(mut self, issuer: crate::models::LogIssuer) -> LogAuthenticationContext {
    self.issuer = Some(issuer);
    self
  }

  pub fn issuer(&self) -> Option<&crate::models::LogIssuer> {
    self.issuer.as_ref()
  }

  pub fn reset_issuer(&mut self) {
    self.issuer = None;
  }

}



