/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Application {
  #[serde(rename = "_embedded")]
  _embedded: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "accessibility")]
  accessibility: Option<crate::models::ApplicationAccessibility>,
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "credentials")]
  credentials: Option<crate::models::ApplicationCredentials>,
  #[serde(rename = "features")]
  features: Option<Vec<String>>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "label")]
  label: Option<String>,
  #[serde(rename = "lastUpdated")]
  last_updated: Option<String>,
  #[serde(rename = "licensing")]
  licensing: Option<crate::models::ApplicationLicensing>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "profile")]
  profile: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "settings")]
  settings: Option<crate::models::ApplicationSettings>,
  #[serde(rename = "signOnMode")]
  sign_on_mode: Option<crate::models::ApplicationSignOnMode>,
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "visibility")]
  visibility: Option<crate::models::ApplicationVisibility>
}

impl Application {
  pub fn new() -> Application {
    Application {
      _embedded: None,
      _links: None,
      accessibility: None,
      created: None,
      credentials: None,
      features: None,
      id: None,
      label: None,
      last_updated: None,
      licensing: None,
      name: None,
      profile: None,
      settings: None,
      sign_on_mode: None,
      status: None,
      visibility: None
    }
  }

  pub fn set_embedded(&mut self, _embedded: ::std::collections::HashMap<String, Value>) {
    self._embedded = Some(_embedded);
  }

  pub fn with_embedded(mut self, _embedded: ::std::collections::HashMap<String, Value>) -> Application {
    self._embedded = Some(_embedded);
    self
  }

  pub fn _embedded(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._embedded.as_ref()
  }

  pub fn reset_embedded(&mut self) {
    self._embedded = None;
  }

  pub fn set_links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with_links(mut self, _links: ::std::collections::HashMap<String, Value>) -> Application {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset_links(&mut self) {
    self._links = None;
  }

  pub fn set_accessibility(&mut self, accessibility: crate::models::ApplicationAccessibility) {
    self.accessibility = Some(accessibility);
  }

  pub fn with_accessibility(mut self, accessibility: crate::models::ApplicationAccessibility) -> Application {
    self.accessibility = Some(accessibility);
    self
  }

  pub fn accessibility(&self) -> Option<&crate::models::ApplicationAccessibility> {
    self.accessibility.as_ref()
  }

  pub fn reset_accessibility(&mut self) {
    self.accessibility = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> Application {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_credentials(&mut self, credentials: crate::models::ApplicationCredentials) {
    self.credentials = Some(credentials);
  }

  pub fn with_credentials(mut self, credentials: crate::models::ApplicationCredentials) -> Application {
    self.credentials = Some(credentials);
    self
  }

  pub fn credentials(&self) -> Option<&crate::models::ApplicationCredentials> {
    self.credentials.as_ref()
  }

  pub fn reset_credentials(&mut self) {
    self.credentials = None;
  }

  pub fn set_features(&mut self, features: Vec<String>) {
    self.features = Some(features);
  }

  pub fn with_features(mut self, features: Vec<String>) -> Application {
    self.features = Some(features);
    self
  }

  pub fn features(&self) -> Option<&Vec<String>> {
    self.features.as_ref()
  }

  pub fn reset_features(&mut self) {
    self.features = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Application {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: String) -> Application {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&String> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_last_updated(&mut self, last_updated: String) {
    self.last_updated = Some(last_updated);
  }

  pub fn with_last_updated(mut self, last_updated: String) -> Application {
    self.last_updated = Some(last_updated);
    self
  }

  pub fn last_updated(&self) -> Option<&String> {
    self.last_updated.as_ref()
  }

  pub fn reset_last_updated(&mut self) {
    self.last_updated = None;
  }

  pub fn set_licensing(&mut self, licensing: crate::models::ApplicationLicensing) {
    self.licensing = Some(licensing);
  }

  pub fn with_licensing(mut self, licensing: crate::models::ApplicationLicensing) -> Application {
    self.licensing = Some(licensing);
    self
  }

  pub fn licensing(&self) -> Option<&crate::models::ApplicationLicensing> {
    self.licensing.as_ref()
  }

  pub fn reset_licensing(&mut self) {
    self.licensing = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Application {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_profile(&mut self, profile: ::std::collections::HashMap<String, Value>) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: ::std::collections::HashMap<String, Value>) -> Application {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

  pub fn set_settings(&mut self, settings: crate::models::ApplicationSettings) {
    self.settings = Some(settings);
  }

  pub fn with_settings(mut self, settings: crate::models::ApplicationSettings) -> Application {
    self.settings = Some(settings);
    self
  }

  pub fn settings(&self) -> Option<&crate::models::ApplicationSettings> {
    self.settings.as_ref()
  }

  pub fn reset_settings(&mut self) {
    self.settings = None;
  }

  pub fn set_sign_on_mode(&mut self, sign_on_mode: crate::models::ApplicationSignOnMode) {
    self.sign_on_mode = Some(sign_on_mode);
  }

  pub fn with_sign_on_mode(mut self, sign_on_mode: crate::models::ApplicationSignOnMode) -> Application {
    self.sign_on_mode = Some(sign_on_mode);
    self
  }

  pub fn sign_on_mode(&self) -> Option<&crate::models::ApplicationSignOnMode> {
    self.sign_on_mode.as_ref()
  }

  pub fn reset_sign_on_mode(&mut self) {
    self.sign_on_mode = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> Application {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_visibility(&mut self, visibility: crate::models::ApplicationVisibility) {
    self.visibility = Some(visibility);
  }

  pub fn with_visibility(mut self, visibility: crate::models::ApplicationVisibility) -> Application {
    self.visibility = Some(visibility);
    self
  }

  pub fn visibility(&self) -> Option<&crate::models::ApplicationVisibility> {
    self.visibility.as_ref()
  }

  pub fn reset_visibility(&mut self) {
    self.visibility = None;
  }

}



