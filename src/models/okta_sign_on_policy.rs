/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OktaSignOnPolicy {
  #[serde(rename = "conditions")]
  conditions: Option<crate::models::OktaSignOnPolicyConditions>
}

impl OktaSignOnPolicy {
  pub fn new() -> OktaSignOnPolicy {
    OktaSignOnPolicy {
      conditions: None
    }
  }

  pub fn set_conditions(&mut self, conditions: crate::models::OktaSignOnPolicyConditions) {
    self.conditions = Some(conditions);
  }

  pub fn with_conditions(mut self, conditions: crate::models::OktaSignOnPolicyConditions) -> OktaSignOnPolicy {
    self.conditions = Some(conditions);
    self
  }

  pub fn conditions(&self) -> Option<&crate::models::OktaSignOnPolicyConditions> {
    self.conditions.as_ref()
  }

  pub fn reset_conditions(&mut self) {
    self.conditions = None;
  }

}



