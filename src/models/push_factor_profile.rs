/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PushFactorProfile {
  #[serde(rename = "credentialId")]
  credential_id: Option<String>,
  #[serde(rename = "deviceType")]
  device_type: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "platform")]
  platform: Option<String>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl PushFactorProfile {
  pub fn new() -> PushFactorProfile {
    PushFactorProfile {
      credential_id: None,
      device_type: None,
      name: None,
      platform: None,
      version: None
    }
  }

  pub fn set_credential_id(&mut self, credential_id: String) {
    self.credential_id = Some(credential_id);
  }

  pub fn with_credential_id(mut self, credential_id: String) -> PushFactorProfile {
    self.credential_id = Some(credential_id);
    self
  }

  pub fn credential_id(&self) -> Option<&String> {
    self.credential_id.as_ref()
  }

  pub fn reset_credential_id(&mut self) {
    self.credential_id = None;
  }

  pub fn set_device_type(&mut self, device_type: String) {
    self.device_type = Some(device_type);
  }

  pub fn with_device_type(mut self, device_type: String) -> PushFactorProfile {
    self.device_type = Some(device_type);
    self
  }

  pub fn device_type(&self) -> Option<&String> {
    self.device_type.as_ref()
  }

  pub fn reset_device_type(&mut self) {
    self.device_type = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PushFactorProfile {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_platform(&mut self, platform: String) {
    self.platform = Some(platform);
  }

  pub fn with_platform(mut self, platform: String) -> PushFactorProfile {
    self.platform = Some(platform);
    self
  }

  pub fn platform(&self) -> Option<&String> {
    self.platform.as_ref()
  }

  pub fn reset_platform(&mut self) {
    self.platform = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> PushFactorProfile {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



