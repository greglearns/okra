/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct LogApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl LogApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> LogApiClient {
        LogApiClient {
            configuration: configuration,
        }
    }
}

pub trait LogApi {
    fn get_logs(&self, until: &str, since: &str, filter: &str, q: &str, limit: i32, sort_order: &str, after: &str) -> Result<Vec<::models::LogEvent>, Error>;
}


impl LogApi for LogApiClient {
    fn get_logs(&self, until: &str, since: &str, filter: &str, q: &str, limit: i32, sort_order: &str, after: &str) -> Result<Vec<::models::LogEvent>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("until", &until.to_string());
            query.append_pair("since", &since.to_string());
            query.append_pair("filter", &filter.to_string());
            query.append_pair("q", &q.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("sortOrder", &sort_order.to_string());
            query.append_pair("after", &after.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/logs?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
