/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct ApplicationApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ApplicationApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ApplicationApiClient {
        ApplicationApiClient {
            configuration: configuration,
        }
    }
}

pub trait ApplicationApi {
    fn activate_application(&self, app_id: &str) -> Result<(), Error>;
    fn assign_user_to_application(&self, app_id: &str, app_user: ::models::AppUser) -> Result<::models::AppUser, Error>;
    fn clone_application_key(&self, app_id: &str, key_id: &str, target_aid: &str) -> Result<::models::JsonWebKey, Error>;
    fn create_application(&self, application: ::models::Application, activate: bool) -> Result<::models::Application, Error>;
    fn create_application_group_assignment(&self, app_id: &str, group_id: &str, application_group_assignment: ::models::ApplicationGroupAssignment) -> Result<::models::ApplicationGroupAssignment, Error>;
    fn deactivate_application(&self, app_id: &str) -> Result<(), Error>;
    fn delete_application(&self, app_id: &str) -> Result<(), Error>;
    fn delete_application_group_assignment(&self, app_id: &str, group_id: &str) -> Result<(), Error>;
    fn delete_application_user(&self, app_id: &str, user_id: &str, send_email: bool) -> Result<(), Error>;
    fn get_application(&self, app_id: &str, expand: &str) -> Result<::models::Application, Error>;
    fn get_application_group_assignment(&self, app_id: &str, group_id: &str, expand: &str) -> Result<::models::ApplicationGroupAssignment, Error>;
    fn get_application_key(&self, app_id: &str, key_id: &str) -> Result<::models::JsonWebKey, Error>;
    fn get_application_user(&self, app_id: &str, user_id: &str, expand: &str) -> Result<::models::AppUser, Error>;
    fn list_application_group_assignments(&self, app_id: &str, q: &str, after: &str, limit: i32, expand: &str) -> Result<Vec<::models::ApplicationGroupAssignment>, Error>;
    fn list_application_keys(&self, app_id: &str) -> Result<Vec<::models::JsonWebKey>, Error>;
    fn list_application_users(&self, app_id: &str, q: &str, query_scope: &str, after: &str, limit: i32, filter: &str, expand: &str) -> Result<Vec<::models::AppUser>, Error>;
    fn list_applications(&self, q: &str, after: &str, limit: i32, filter: &str, expand: &str, include_non_deleted: bool) -> Result<Vec<::models::Application>, Error>;
    fn update_application(&self, app_id: &str, application: ::models::Application) -> Result<::models::Application, Error>;
    fn update_application_user(&self, app_id: &str, user_id: &str, app_user: ::models::AppUser) -> Result<::models::AppUser, Error>;
}


impl ApplicationApi for ApplicationApiClient {
    fn activate_application(&self, app_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/lifecycle/activate?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn assign_user_to_application(&self, app_id: &str, app_user: ::models::AppUser) -> Result<::models::AppUser, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/users?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&app_user);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn clone_application_key(&self, app_id: &str, key_id: &str, target_aid: &str) -> Result<::models::JsonWebKey, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("targetAid", &target_aid.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/credentials/keys/{keyId}/clone?{}", configuration.base_path, query_string, appId=app_id, keyId=key_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_application(&self, application: ::models::Application, activate: bool) -> Result<::models::Application, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("activate", &activate.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps?{}", configuration.base_path, query_string);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&application);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_application_group_assignment(&self, app_id: &str, group_id: &str, application_group_assignment: ::models::ApplicationGroupAssignment) -> Result<::models::ApplicationGroupAssignment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/groups/{groupId}?{}", configuration.base_path, query_string, appId=app_id, groupId=group_id);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&application_group_assignment);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn deactivate_application(&self, app_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/lifecycle/deactivate?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_application(&self, app_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_application_group_assignment(&self, app_id: &str, group_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/groups/{groupId}?{}", configuration.base_path, query_string, appId=app_id, groupId=group_id);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_application_user(&self, app_id: &str, user_id: &str, send_email: bool) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("sendEmail", &send_email.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/users/{userId}?{}", configuration.base_path, query_string, appId=app_id, userId=user_id);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_application(&self, app_id: &str, expand: &str) -> Result<::models::Application, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("expand", &expand.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_application_group_assignment(&self, app_id: &str, group_id: &str, expand: &str) -> Result<::models::ApplicationGroupAssignment, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("expand", &expand.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/groups/{groupId}?{}", configuration.base_path, query_string, appId=app_id, groupId=group_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_application_key(&self, app_id: &str, key_id: &str) -> Result<::models::JsonWebKey, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/credentials/keys/{keyId}?{}", configuration.base_path, query_string, appId=app_id, keyId=key_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_application_user(&self, app_id: &str, user_id: &str, expand: &str) -> Result<::models::AppUser, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("expand", &expand.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/users/{userId}?{}", configuration.base_path, query_string, appId=app_id, userId=user_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_application_group_assignments(&self, app_id: &str, q: &str, after: &str, limit: i32, expand: &str) -> Result<Vec<::models::ApplicationGroupAssignment>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("q", &q.to_string());
            query.append_pair("after", &after.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("expand", &expand.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/groups?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_application_keys(&self, app_id: &str) -> Result<Vec<::models::JsonWebKey>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/credentials/keys?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_application_users(&self, app_id: &str, q: &str, query_scope: &str, after: &str, limit: i32, filter: &str, expand: &str) -> Result<Vec<::models::AppUser>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("q", &q.to_string());
            query.append_pair("query_scope", &query_scope.to_string());
            query.append_pair("after", &after.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("filter", &filter.to_string());
            query.append_pair("expand", &expand.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/users?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_applications(&self, q: &str, after: &str, limit: i32, filter: &str, expand: &str, include_non_deleted: bool) -> Result<Vec<::models::Application>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("q", &q.to_string());
            query.append_pair("after", &after.to_string());
            query.append_pair("limit", &limit.to_string());
            query.append_pair("filter", &filter.to_string());
            query.append_pair("expand", &expand.to_string());
            query.append_pair("includeNonDeleted", &include_non_deleted.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_application(&self, app_id: &str, application: ::models::Application) -> Result<::models::Application, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}?{}", configuration.base_path, query_string, appId=app_id);

        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&application);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_application_user(&self, app_id: &str, user_id: &str, app_user: ::models::AppUser) -> Result<::models::AppUser, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/apps/{appId}/users/{userId}?{}", configuration.base_path, query_string, appId=app_id, userId=user_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&app_user);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
