/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct UserFactorApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl UserFactorApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> UserFactorApiClient {
        UserFactorApiClient {
            configuration: configuration,
        }
    }
}

pub trait UserFactorApi {
    fn activate_factor(&self, user_id: &str, factor_id: &str, body: ::models::VerifyFactorRequest) -> Result<::models::Factor, Error>;
    fn add_factor(&self, user_id: &str, body: ::models::Factor, update_phone: bool, template_id: &str, token_lifetime_seconds: i32, activate: bool) -> Result<::models::Factor, Error>;
    fn delete_factor(&self, user_id: &str, factor_id: &str) -> Result<(), Error>;
    fn get_factor(&self, user_id: &str, factor_id: &str) -> Result<::models::Factor, Error>;
    fn list_factors(&self, user_id: &str) -> Result<Vec<::models::Factor>, Error>;
    fn list_supported_factors(&self, user_id: &str) -> Result<Vec<::models::Factor>, Error>;
    fn list_supported_security_questions(&self, user_id: &str) -> Result<Vec<::models::SecurityQuestion>, Error>;
    fn verify_factor(&self, user_id: &str, factor_id: &str, body: ::models::VerifyFactorRequest, template_id: &str, token_lifetime_seconds: i32) -> Result<::models::VerifyFactorResponse, Error>;
}


impl UserFactorApi for UserFactorApiClient {
    fn activate_factor(&self, user_id: &str, factor_id: &str, body: ::models::VerifyFactorRequest) -> Result<::models::Factor, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate?{}", configuration.base_path, query_string, userId=user_id, factorId=factor_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn add_factor(&self, user_id: &str, body: ::models::Factor, update_phone: bool, template_id: &str, token_lifetime_seconds: i32, activate: bool) -> Result<::models::Factor, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("updatePhone", &update_phone.to_string());
            query.append_pair("templateId", &template_id.to_string());
            query.append_pair("tokenLifetimeSeconds", &token_lifetime_seconds.to_string());
            query.append_pair("activate", &activate.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors?{}", configuration.base_path, query_string, userId=user_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_factor(&self, user_id: &str, factor_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors/{factorId}?{}", configuration.base_path, query_string, userId=user_id, factorId=factor_id);

        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_factor(&self, user_id: &str, factor_id: &str) -> Result<::models::Factor, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors/{factorId}?{}", configuration.base_path, query_string, userId=user_id, factorId=factor_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_factors(&self, user_id: &str) -> Result<Vec<::models::Factor>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors?{}", configuration.base_path, query_string, userId=user_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_supported_factors(&self, user_id: &str) -> Result<Vec<::models::Factor>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors/catalog?{}", configuration.base_path, query_string, userId=user_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_supported_security_questions(&self, user_id: &str) -> Result<Vec<::models::SecurityQuestion>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors/questions?{}", configuration.base_path, query_string, userId=user_id);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn verify_factor(&self, user_id: &str, factor_id: &str, body: ::models::VerifyFactorRequest, template_id: &str, token_lifetime_seconds: i32) -> Result<::models::VerifyFactorResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("templateId", &template_id.to_string());
            query.append_pair("tokenLifetimeSeconds", &token_lifetime_seconds.to_string());

            query.finish()
        };
        let uri_str = format!("{}/api/v1/users/{userId}/factors/{factorId}/verify?{}", configuration.base_path, query_string, userId=user_id, factorId=factor_id);

        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        

        req_builder = req_builder.json(&body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
