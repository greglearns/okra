/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PasswordPolicyPasswordSettingsAge {
  #[serde(rename = "expireWarnDays")]
  expire_warn_days: Option<i32>,
  #[serde(rename = "historyCount")]
  history_count: Option<i32>,
  #[serde(rename = "maxAgeDays")]
  max_age_days: Option<i32>,
  #[serde(rename = "minAgeMinutes")]
  min_age_minutes: Option<i32>
}

impl PasswordPolicyPasswordSettingsAge {
  pub fn new() -> PasswordPolicyPasswordSettingsAge {
    PasswordPolicyPasswordSettingsAge {
      expire_warn_days: None,
      history_count: None,
      max_age_days: None,
      min_age_minutes: None
    }
  }

  pub fn set_expire_warn_days(&mut self, expire_warn_days: i32) {
    self.expire_warn_days = Some(expire_warn_days);
  }

  pub fn with_expire_warn_days(mut self, expire_warn_days: i32) -> PasswordPolicyPasswordSettingsAge {
    self.expire_warn_days = Some(expire_warn_days);
    self
  }

  pub fn expire_warn_days(&self) -> Option<&i32> {
    self.expire_warn_days.as_ref()
  }

  pub fn reset_expire_warn_days(&mut self) {
    self.expire_warn_days = None;
  }

  pub fn set_history_count(&mut self, history_count: i32) {
    self.history_count = Some(history_count);
  }

  pub fn with_history_count(mut self, history_count: i32) -> PasswordPolicyPasswordSettingsAge {
    self.history_count = Some(history_count);
    self
  }

  pub fn history_count(&self) -> Option<&i32> {
    self.history_count.as_ref()
  }

  pub fn reset_history_count(&mut self) {
    self.history_count = None;
  }

  pub fn set_max_age_days(&mut self, max_age_days: i32) {
    self.max_age_days = Some(max_age_days);
  }

  pub fn with_max_age_days(mut self, max_age_days: i32) -> PasswordPolicyPasswordSettingsAge {
    self.max_age_days = Some(max_age_days);
    self
  }

  pub fn max_age_days(&self) -> Option<&i32> {
    self.max_age_days.as_ref()
  }

  pub fn reset_max_age_days(&mut self) {
    self.max_age_days = None;
  }

  pub fn set_min_age_minutes(&mut self, min_age_minutes: i32) {
    self.min_age_minutes = Some(min_age_minutes);
  }

  pub fn with_min_age_minutes(mut self, min_age_minutes: i32) -> PasswordPolicyPasswordSettingsAge {
    self.min_age_minutes = Some(min_age_minutes);
    self
  }

  pub fn min_age_minutes(&self) -> Option<&i32> {
    self.min_age_minutes.as_ref()
  }

  pub fn reset_min_age_minutes(&mut self) {
    self.min_age_minutes = None;
  }

}



