/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct User {
  #[serde(rename = "_embedded")]
  _embedded: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "activated")]
  activated: Option<String>,
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "credentials")]
  credentials: Option<::models::UserCredentials>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "lastLogin")]
  last_login: Option<String>,
  #[serde(rename = "lastUpdated")]
  last_updated: Option<String>,
  #[serde(rename = "passwordChanged")]
  password_changed: Option<String>,
  #[serde(rename = "profile")]
  profile: Option<::models::UserProfile>,
  #[serde(rename = "status")]
  status: Option<::models::UserStatus>,
  #[serde(rename = "statusChanged")]
  status_changed: Option<String>,
  #[serde(rename = "transitioningToStatus")]
  transitioning_to_status: Option<::models::UserStatus>
}

impl User {
  pub fn new() -> User {
    User {
      _embedded: None,
      _links: None,
      activated: None,
      created: None,
      credentials: None,
      id: None,
      last_login: None,
      last_updated: None,
      password_changed: None,
      profile: None,
      status: None,
      status_changed: None,
      transitioning_to_status: None
    }
  }

  pub fn set__embedded(&mut self, _embedded: ::std::collections::HashMap<String, Value>) {
    self._embedded = Some(_embedded);
  }

  pub fn with__embedded(mut self, _embedded: ::std::collections::HashMap<String, Value>) -> User {
    self._embedded = Some(_embedded);
    self
  }

  pub fn _embedded(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._embedded.as_ref()
  }

  pub fn reset__embedded(&mut self) {
    self._embedded = None;
  }

  pub fn set__links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::std::collections::HashMap<String, Value>) -> User {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

  pub fn set_activated(&mut self, activated: String) {
    self.activated = Some(activated);
  }

  pub fn with_activated(mut self, activated: String) -> User {
    self.activated = Some(activated);
    self
  }

  pub fn activated(&self) -> Option<&String> {
    self.activated.as_ref()
  }

  pub fn reset_activated(&mut self) {
    self.activated = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> User {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_credentials(&mut self, credentials: ::models::UserCredentials) {
    self.credentials = Some(credentials);
  }

  pub fn with_credentials(mut self, credentials: ::models::UserCredentials) -> User {
    self.credentials = Some(credentials);
    self
  }

  pub fn credentials(&self) -> Option<&::models::UserCredentials> {
    self.credentials.as_ref()
  }

  pub fn reset_credentials(&mut self) {
    self.credentials = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> User {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_last_login(&mut self, last_login: String) {
    self.last_login = Some(last_login);
  }

  pub fn with_last_login(mut self, last_login: String) -> User {
    self.last_login = Some(last_login);
    self
  }

  pub fn last_login(&self) -> Option<&String> {
    self.last_login.as_ref()
  }

  pub fn reset_last_login(&mut self) {
    self.last_login = None;
  }

  pub fn set_last_updated(&mut self, last_updated: String) {
    self.last_updated = Some(last_updated);
  }

  pub fn with_last_updated(mut self, last_updated: String) -> User {
    self.last_updated = Some(last_updated);
    self
  }

  pub fn last_updated(&self) -> Option<&String> {
    self.last_updated.as_ref()
  }

  pub fn reset_last_updated(&mut self) {
    self.last_updated = None;
  }

  pub fn set_password_changed(&mut self, password_changed: String) {
    self.password_changed = Some(password_changed);
  }

  pub fn with_password_changed(mut self, password_changed: String) -> User {
    self.password_changed = Some(password_changed);
    self
  }

  pub fn password_changed(&self) -> Option<&String> {
    self.password_changed.as_ref()
  }

  pub fn reset_password_changed(&mut self) {
    self.password_changed = None;
  }

  pub fn set_profile(&mut self, profile: ::models::UserProfile) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: ::models::UserProfile) -> User {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&::models::UserProfile> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

  pub fn set_status(&mut self, status: ::models::UserStatus) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: ::models::UserStatus) -> User {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&::models::UserStatus> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_status_changed(&mut self, status_changed: String) {
    self.status_changed = Some(status_changed);
  }

  pub fn with_status_changed(mut self, status_changed: String) -> User {
    self.status_changed = Some(status_changed);
    self
  }

  pub fn status_changed(&self) -> Option<&String> {
    self.status_changed.as_ref()
  }

  pub fn reset_status_changed(&mut self) {
    self.status_changed = None;
  }

  pub fn set_transitioning_to_status(&mut self, transitioning_to_status: ::models::UserStatus) {
    self.transitioning_to_status = Some(transitioning_to_status);
  }

  pub fn with_transitioning_to_status(mut self, transitioning_to_status: ::models::UserStatus) -> User {
    self.transitioning_to_status = Some(transitioning_to_status);
    self
  }

  pub fn transitioning_to_status(&self) -> Option<&::models::UserStatus> {
    self.transitioning_to_status.as_ref()
  }

  pub fn reset_transitioning_to_status(&mut self) {
    self.transitioning_to_status = None;
  }

}



