/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PasswordPolicyAuthenticationProviderCondition {
  #[serde(rename = "include")]
  include: Option<Vec<String>>,
  #[serde(rename = "provider")]
  provider: Option<String>
}

impl PasswordPolicyAuthenticationProviderCondition {
  pub fn new() -> PasswordPolicyAuthenticationProviderCondition {
    PasswordPolicyAuthenticationProviderCondition {
      include: None,
      provider: None
    }
  }

  pub fn set_include(&mut self, include: Vec<String>) {
    self.include = Some(include);
  }

  pub fn with_include(mut self, include: Vec<String>) -> PasswordPolicyAuthenticationProviderCondition {
    self.include = Some(include);
    self
  }

  pub fn include(&self) -> Option<&Vec<String>> {
    self.include.as_ref()
  }

  pub fn reset_include(&mut self) {
    self.include = None;
  }

  pub fn set_provider(&mut self, provider: String) {
    self.provider = Some(provider);
  }

  pub fn with_provider(mut self, provider: String) -> PasswordPolicyAuthenticationProviderCondition {
    self.provider = Some(provider);
    self
  }

  pub fn provider(&self) -> Option<&String> {
    self.provider.as_ref()
  }

  pub fn reset_provider(&mut self) {
    self.provider = None;
  }

}



