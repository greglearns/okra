/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AppUser {
  #[serde(rename = "_embedded")]
  _embedded: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "_links")]
  _links: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "credentials")]
  credentials: Option<::models::AppUserCredentials>,
  #[serde(rename = "externalId")]
  external_id: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "lastSync")]
  last_sync: Option<String>,
  #[serde(rename = "lastUpdated")]
  last_updated: Option<String>,
  #[serde(rename = "passwordChanged")]
  password_changed: Option<String>,
  #[serde(rename = "profile")]
  profile: Option<::std::collections::HashMap<String, Value>>,
  #[serde(rename = "scope")]
  scope: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "statusChanged")]
  status_changed: Option<String>,
  #[serde(rename = "syncState")]
  sync_state: Option<String>
}

impl AppUser {
  pub fn new() -> AppUser {
    AppUser {
      _embedded: None,
      _links: None,
      created: None,
      credentials: None,
      external_id: None,
      id: None,
      last_sync: None,
      last_updated: None,
      password_changed: None,
      profile: None,
      scope: None,
      status: None,
      status_changed: None,
      sync_state: None
    }
  }

  pub fn set__embedded(&mut self, _embedded: ::std::collections::HashMap<String, Value>) {
    self._embedded = Some(_embedded);
  }

  pub fn with__embedded(mut self, _embedded: ::std::collections::HashMap<String, Value>) -> AppUser {
    self._embedded = Some(_embedded);
    self
  }

  pub fn _embedded(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._embedded.as_ref()
  }

  pub fn reset__embedded(&mut self) {
    self._embedded = None;
  }

  pub fn set__links(&mut self, _links: ::std::collections::HashMap<String, Value>) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::std::collections::HashMap<String, Value>) -> AppUser {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> AppUser {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_credentials(&mut self, credentials: ::models::AppUserCredentials) {
    self.credentials = Some(credentials);
  }

  pub fn with_credentials(mut self, credentials: ::models::AppUserCredentials) -> AppUser {
    self.credentials = Some(credentials);
    self
  }

  pub fn credentials(&self) -> Option<&::models::AppUserCredentials> {
    self.credentials.as_ref()
  }

  pub fn reset_credentials(&mut self) {
    self.credentials = None;
  }

  pub fn set_external_id(&mut self, external_id: String) {
    self.external_id = Some(external_id);
  }

  pub fn with_external_id(mut self, external_id: String) -> AppUser {
    self.external_id = Some(external_id);
    self
  }

  pub fn external_id(&self) -> Option<&String> {
    self.external_id.as_ref()
  }

  pub fn reset_external_id(&mut self) {
    self.external_id = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> AppUser {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_last_sync(&mut self, last_sync: String) {
    self.last_sync = Some(last_sync);
  }

  pub fn with_last_sync(mut self, last_sync: String) -> AppUser {
    self.last_sync = Some(last_sync);
    self
  }

  pub fn last_sync(&self) -> Option<&String> {
    self.last_sync.as_ref()
  }

  pub fn reset_last_sync(&mut self) {
    self.last_sync = None;
  }

  pub fn set_last_updated(&mut self, last_updated: String) {
    self.last_updated = Some(last_updated);
  }

  pub fn with_last_updated(mut self, last_updated: String) -> AppUser {
    self.last_updated = Some(last_updated);
    self
  }

  pub fn last_updated(&self) -> Option<&String> {
    self.last_updated.as_ref()
  }

  pub fn reset_last_updated(&mut self) {
    self.last_updated = None;
  }

  pub fn set_password_changed(&mut self, password_changed: String) {
    self.password_changed = Some(password_changed);
  }

  pub fn with_password_changed(mut self, password_changed: String) -> AppUser {
    self.password_changed = Some(password_changed);
    self
  }

  pub fn password_changed(&self) -> Option<&String> {
    self.password_changed.as_ref()
  }

  pub fn reset_password_changed(&mut self) {
    self.password_changed = None;
  }

  pub fn set_profile(&mut self, profile: ::std::collections::HashMap<String, Value>) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: ::std::collections::HashMap<String, Value>) -> AppUser {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

  pub fn set_scope(&mut self, scope: String) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: String) -> AppUser {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&String> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> AppUser {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_status_changed(&mut self, status_changed: String) {
    self.status_changed = Some(status_changed);
  }

  pub fn with_status_changed(mut self, status_changed: String) -> AppUser {
    self.status_changed = Some(status_changed);
    self
  }

  pub fn status_changed(&self) -> Option<&String> {
    self.status_changed.as_ref()
  }

  pub fn reset_status_changed(&mut self) {
    self.status_changed = None;
  }

  pub fn set_sync_state(&mut self, sync_state: String) {
    self.sync_state = Some(sync_state);
  }

  pub fn with_sync_state(mut self, sync_state: String) -> AppUser {
    self.sync_state = Some(sync_state);
    self
  }

  pub fn sync_state(&self) -> Option<&String> {
    self.sync_state.as_ref()
  }

  pub fn reset_sync_state(&mut self) {
    self.sync_state = None;
  }

}



