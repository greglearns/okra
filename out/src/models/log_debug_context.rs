/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogDebugContext {
  #[serde(rename = "debugData")]
  debug_data: Option<::std::collections::HashMap<String, Value>>
}

impl LogDebugContext {
  pub fn new() -> LogDebugContext {
    LogDebugContext {
      debug_data: None
    }
  }

  pub fn set_debug_data(&mut self, debug_data: ::std::collections::HashMap<String, Value>) {
    self.debug_data = Some(debug_data);
  }

  pub fn with_debug_data(mut self, debug_data: ::std::collections::HashMap<String, Value>) -> LogDebugContext {
    self.debug_data = Some(debug_data);
    self
  }

  pub fn debug_data(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.debug_data.as_ref()
  }

  pub fn reset_debug_data(&mut self) {
    self.debug_data = None;
  }

}



