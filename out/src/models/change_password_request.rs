/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChangePasswordRequest {
  #[serde(rename = "newPassword")]
  new_password: Option<::models::PasswordCredential>,
  #[serde(rename = "oldPassword")]
  old_password: Option<::models::PasswordCredential>
}

impl ChangePasswordRequest {
  pub fn new() -> ChangePasswordRequest {
    ChangePasswordRequest {
      new_password: None,
      old_password: None
    }
  }

  pub fn set_new_password(&mut self, new_password: ::models::PasswordCredential) {
    self.new_password = Some(new_password);
  }

  pub fn with_new_password(mut self, new_password: ::models::PasswordCredential) -> ChangePasswordRequest {
    self.new_password = Some(new_password);
    self
  }

  pub fn new_password(&self) -> Option<&::models::PasswordCredential> {
    self.new_password.as_ref()
  }

  pub fn reset_new_password(&mut self) {
    self.new_password = None;
  }

  pub fn set_old_password(&mut self, old_password: ::models::PasswordCredential) {
    self.old_password = Some(old_password);
  }

  pub fn with_old_password(mut self, old_password: ::models::PasswordCredential) -> ChangePasswordRequest {
    self.old_password = Some(old_password);
    self
  }

  pub fn old_password(&self) -> Option<&::models::PasswordCredential> {
    self.old_password.as_ref()
  }

  pub fn reset_old_password(&mut self) {
    self.old_password = None;
  }

}



