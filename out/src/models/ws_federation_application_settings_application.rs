/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct WsFederationApplicationSettingsApplication {
  #[serde(rename = "attributeStatements")]
  attribute_statements: Option<String>,
  #[serde(rename = "audienceRestriction")]
  audience_restriction: Option<String>,
  #[serde(rename = "authnContextClassRef")]
  authn_context_class_ref: Option<String>,
  #[serde(rename = "groupFilter")]
  group_filter: Option<String>,
  #[serde(rename = "groupName")]
  group_name: Option<String>,
  #[serde(rename = "groupValueFormat")]
  group_value_format: Option<String>,
  #[serde(rename = "nameIDFormat")]
  name_id_format: Option<String>,
  #[serde(rename = "realm")]
  realm: Option<String>,
  #[serde(rename = "siteURL")]
  site_url: Option<String>,
  #[serde(rename = "usernameAttribute")]
  username_attribute: Option<String>,
  #[serde(rename = "wReplyOverride")]
  w_reply_override: Option<bool>,
  #[serde(rename = "wReplyURL")]
  w_reply_url: Option<String>
}

impl WsFederationApplicationSettingsApplication {
  pub fn new() -> WsFederationApplicationSettingsApplication {
    WsFederationApplicationSettingsApplication {
      attribute_statements: None,
      audience_restriction: None,
      authn_context_class_ref: None,
      group_filter: None,
      group_name: None,
      group_value_format: None,
      name_id_format: None,
      realm: None,
      site_url: None,
      username_attribute: None,
      w_reply_override: None,
      w_reply_url: None
    }
  }

  pub fn set_attribute_statements(&mut self, attribute_statements: String) {
    self.attribute_statements = Some(attribute_statements);
  }

  pub fn with_attribute_statements(mut self, attribute_statements: String) -> WsFederationApplicationSettingsApplication {
    self.attribute_statements = Some(attribute_statements);
    self
  }

  pub fn attribute_statements(&self) -> Option<&String> {
    self.attribute_statements.as_ref()
  }

  pub fn reset_attribute_statements(&mut self) {
    self.attribute_statements = None;
  }

  pub fn set_audience_restriction(&mut self, audience_restriction: String) {
    self.audience_restriction = Some(audience_restriction);
  }

  pub fn with_audience_restriction(mut self, audience_restriction: String) -> WsFederationApplicationSettingsApplication {
    self.audience_restriction = Some(audience_restriction);
    self
  }

  pub fn audience_restriction(&self) -> Option<&String> {
    self.audience_restriction.as_ref()
  }

  pub fn reset_audience_restriction(&mut self) {
    self.audience_restriction = None;
  }

  pub fn set_authn_context_class_ref(&mut self, authn_context_class_ref: String) {
    self.authn_context_class_ref = Some(authn_context_class_ref);
  }

  pub fn with_authn_context_class_ref(mut self, authn_context_class_ref: String) -> WsFederationApplicationSettingsApplication {
    self.authn_context_class_ref = Some(authn_context_class_ref);
    self
  }

  pub fn authn_context_class_ref(&self) -> Option<&String> {
    self.authn_context_class_ref.as_ref()
  }

  pub fn reset_authn_context_class_ref(&mut self) {
    self.authn_context_class_ref = None;
  }

  pub fn set_group_filter(&mut self, group_filter: String) {
    self.group_filter = Some(group_filter);
  }

  pub fn with_group_filter(mut self, group_filter: String) -> WsFederationApplicationSettingsApplication {
    self.group_filter = Some(group_filter);
    self
  }

  pub fn group_filter(&self) -> Option<&String> {
    self.group_filter.as_ref()
  }

  pub fn reset_group_filter(&mut self) {
    self.group_filter = None;
  }

  pub fn set_group_name(&mut self, group_name: String) {
    self.group_name = Some(group_name);
  }

  pub fn with_group_name(mut self, group_name: String) -> WsFederationApplicationSettingsApplication {
    self.group_name = Some(group_name);
    self
  }

  pub fn group_name(&self) -> Option<&String> {
    self.group_name.as_ref()
  }

  pub fn reset_group_name(&mut self) {
    self.group_name = None;
  }

  pub fn set_group_value_format(&mut self, group_value_format: String) {
    self.group_value_format = Some(group_value_format);
  }

  pub fn with_group_value_format(mut self, group_value_format: String) -> WsFederationApplicationSettingsApplication {
    self.group_value_format = Some(group_value_format);
    self
  }

  pub fn group_value_format(&self) -> Option<&String> {
    self.group_value_format.as_ref()
  }

  pub fn reset_group_value_format(&mut self) {
    self.group_value_format = None;
  }

  pub fn set_name_id_format(&mut self, name_id_format: String) {
    self.name_id_format = Some(name_id_format);
  }

  pub fn with_name_id_format(mut self, name_id_format: String) -> WsFederationApplicationSettingsApplication {
    self.name_id_format = Some(name_id_format);
    self
  }

  pub fn name_id_format(&self) -> Option<&String> {
    self.name_id_format.as_ref()
  }

  pub fn reset_name_id_format(&mut self) {
    self.name_id_format = None;
  }

  pub fn set_realm(&mut self, realm: String) {
    self.realm = Some(realm);
  }

  pub fn with_realm(mut self, realm: String) -> WsFederationApplicationSettingsApplication {
    self.realm = Some(realm);
    self
  }

  pub fn realm(&self) -> Option<&String> {
    self.realm.as_ref()
  }

  pub fn reset_realm(&mut self) {
    self.realm = None;
  }

  pub fn set_site_url(&mut self, site_url: String) {
    self.site_url = Some(site_url);
  }

  pub fn with_site_url(mut self, site_url: String) -> WsFederationApplicationSettingsApplication {
    self.site_url = Some(site_url);
    self
  }

  pub fn site_url(&self) -> Option<&String> {
    self.site_url.as_ref()
  }

  pub fn reset_site_url(&mut self) {
    self.site_url = None;
  }

  pub fn set_username_attribute(&mut self, username_attribute: String) {
    self.username_attribute = Some(username_attribute);
  }

  pub fn with_username_attribute(mut self, username_attribute: String) -> WsFederationApplicationSettingsApplication {
    self.username_attribute = Some(username_attribute);
    self
  }

  pub fn username_attribute(&self) -> Option<&String> {
    self.username_attribute.as_ref()
  }

  pub fn reset_username_attribute(&mut self) {
    self.username_attribute = None;
  }

  pub fn set_w_reply_override(&mut self, w_reply_override: bool) {
    self.w_reply_override = Some(w_reply_override);
  }

  pub fn with_w_reply_override(mut self, w_reply_override: bool) -> WsFederationApplicationSettingsApplication {
    self.w_reply_override = Some(w_reply_override);
    self
  }

  pub fn w_reply_override(&self) -> Option<&bool> {
    self.w_reply_override.as_ref()
  }

  pub fn reset_w_reply_override(&mut self) {
    self.w_reply_override = None;
  }

  pub fn set_w_reply_url(&mut self, w_reply_url: String) {
    self.w_reply_url = Some(w_reply_url);
  }

  pub fn with_w_reply_url(mut self, w_reply_url: String) -> WsFederationApplicationSettingsApplication {
    self.w_reply_url = Some(w_reply_url);
    self
  }

  pub fn w_reply_url(&self) -> Option<&String> {
    self.w_reply_url.as_ref()
  }

  pub fn reset_w_reply_url(&mut self) {
    self.w_reply_url = None;
  }

}



