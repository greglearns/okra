/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PasswordPolicyRuleActions {
  #[serde(rename = "passwordChange")]
  password_change: Option<::models::PasswordPolicyRuleAction>,
  #[serde(rename = "selfServicePasswordReset")]
  self_service_password_reset: Option<::models::PasswordPolicyRuleAction>,
  #[serde(rename = "selfServiceUnlock")]
  self_service_unlock: Option<::models::PasswordPolicyRuleAction>
}

impl PasswordPolicyRuleActions {
  pub fn new() -> PasswordPolicyRuleActions {
    PasswordPolicyRuleActions {
      password_change: None,
      self_service_password_reset: None,
      self_service_unlock: None
    }
  }

  pub fn set_password_change(&mut self, password_change: ::models::PasswordPolicyRuleAction) {
    self.password_change = Some(password_change);
  }

  pub fn with_password_change(mut self, password_change: ::models::PasswordPolicyRuleAction) -> PasswordPolicyRuleActions {
    self.password_change = Some(password_change);
    self
  }

  pub fn password_change(&self) -> Option<&::models::PasswordPolicyRuleAction> {
    self.password_change.as_ref()
  }

  pub fn reset_password_change(&mut self) {
    self.password_change = None;
  }

  pub fn set_self_service_password_reset(&mut self, self_service_password_reset: ::models::PasswordPolicyRuleAction) {
    self.self_service_password_reset = Some(self_service_password_reset);
  }

  pub fn with_self_service_password_reset(mut self, self_service_password_reset: ::models::PasswordPolicyRuleAction) -> PasswordPolicyRuleActions {
    self.self_service_password_reset = Some(self_service_password_reset);
    self
  }

  pub fn self_service_password_reset(&self) -> Option<&::models::PasswordPolicyRuleAction> {
    self.self_service_password_reset.as_ref()
  }

  pub fn reset_self_service_password_reset(&mut self) {
    self.self_service_password_reset = None;
  }

  pub fn set_self_service_unlock(&mut self, self_service_unlock: ::models::PasswordPolicyRuleAction) {
    self.self_service_unlock = Some(self_service_unlock);
  }

  pub fn with_self_service_unlock(mut self, self_service_unlock: ::models::PasswordPolicyRuleAction) -> PasswordPolicyRuleActions {
    self.self_service_unlock = Some(self_service_unlock);
    self
  }

  pub fn self_service_unlock(&self) -> Option<&::models::PasswordPolicyRuleAction> {
    self.self_service_unlock.as_ref()
  }

  pub fn reset_self_service_unlock(&mut self) {
    self.self_service_unlock = None;
  }

}



