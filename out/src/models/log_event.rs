/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogEvent {
  #[serde(rename = "actor")]
  actor: Option<::models::LogActor>,
  #[serde(rename = "authenticationContext")]
  authentication_context: Option<::models::LogAuthenticationContext>,
  #[serde(rename = "client")]
  client: Option<::models::LogClient>,
  #[serde(rename = "debugContext")]
  debug_context: Option<::models::LogDebugContext>,
  #[serde(rename = "displayMessage")]
  display_message: Option<String>,
  #[serde(rename = "eventType")]
  event_type: Option<String>,
  #[serde(rename = "legacyEventType")]
  legacy_event_type: Option<String>,
  #[serde(rename = "outcome")]
  outcome: Option<::models::LogOutcome>,
  #[serde(rename = "published")]
  published: Option<String>,
  #[serde(rename = "request")]
  request: Option<::models::LogRequest>,
  #[serde(rename = "securityContext")]
  security_context: Option<::models::LogSecurityContext>,
  #[serde(rename = "severity")]
  severity: Option<::models::LogSeverity>,
  #[serde(rename = "target")]
  target: Option<Vec<::models::LogTarget>>,
  #[serde(rename = "transaction")]
  transaction: Option<::models::LogTransaction>,
  #[serde(rename = "uuid")]
  uuid: Option<String>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl LogEvent {
  pub fn new() -> LogEvent {
    LogEvent {
      actor: None,
      authentication_context: None,
      client: None,
      debug_context: None,
      display_message: None,
      event_type: None,
      legacy_event_type: None,
      outcome: None,
      published: None,
      request: None,
      security_context: None,
      severity: None,
      target: None,
      transaction: None,
      uuid: None,
      version: None
    }
  }

  pub fn set_actor(&mut self, actor: ::models::LogActor) {
    self.actor = Some(actor);
  }

  pub fn with_actor(mut self, actor: ::models::LogActor) -> LogEvent {
    self.actor = Some(actor);
    self
  }

  pub fn actor(&self) -> Option<&::models::LogActor> {
    self.actor.as_ref()
  }

  pub fn reset_actor(&mut self) {
    self.actor = None;
  }

  pub fn set_authentication_context(&mut self, authentication_context: ::models::LogAuthenticationContext) {
    self.authentication_context = Some(authentication_context);
  }

  pub fn with_authentication_context(mut self, authentication_context: ::models::LogAuthenticationContext) -> LogEvent {
    self.authentication_context = Some(authentication_context);
    self
  }

  pub fn authentication_context(&self) -> Option<&::models::LogAuthenticationContext> {
    self.authentication_context.as_ref()
  }

  pub fn reset_authentication_context(&mut self) {
    self.authentication_context = None;
  }

  pub fn set_client(&mut self, client: ::models::LogClient) {
    self.client = Some(client);
  }

  pub fn with_client(mut self, client: ::models::LogClient) -> LogEvent {
    self.client = Some(client);
    self
  }

  pub fn client(&self) -> Option<&::models::LogClient> {
    self.client.as_ref()
  }

  pub fn reset_client(&mut self) {
    self.client = None;
  }

  pub fn set_debug_context(&mut self, debug_context: ::models::LogDebugContext) {
    self.debug_context = Some(debug_context);
  }

  pub fn with_debug_context(mut self, debug_context: ::models::LogDebugContext) -> LogEvent {
    self.debug_context = Some(debug_context);
    self
  }

  pub fn debug_context(&self) -> Option<&::models::LogDebugContext> {
    self.debug_context.as_ref()
  }

  pub fn reset_debug_context(&mut self) {
    self.debug_context = None;
  }

  pub fn set_display_message(&mut self, display_message: String) {
    self.display_message = Some(display_message);
  }

  pub fn with_display_message(mut self, display_message: String) -> LogEvent {
    self.display_message = Some(display_message);
    self
  }

  pub fn display_message(&self) -> Option<&String> {
    self.display_message.as_ref()
  }

  pub fn reset_display_message(&mut self) {
    self.display_message = None;
  }

  pub fn set_event_type(&mut self, event_type: String) {
    self.event_type = Some(event_type);
  }

  pub fn with_event_type(mut self, event_type: String) -> LogEvent {
    self.event_type = Some(event_type);
    self
  }

  pub fn event_type(&self) -> Option<&String> {
    self.event_type.as_ref()
  }

  pub fn reset_event_type(&mut self) {
    self.event_type = None;
  }

  pub fn set_legacy_event_type(&mut self, legacy_event_type: String) {
    self.legacy_event_type = Some(legacy_event_type);
  }

  pub fn with_legacy_event_type(mut self, legacy_event_type: String) -> LogEvent {
    self.legacy_event_type = Some(legacy_event_type);
    self
  }

  pub fn legacy_event_type(&self) -> Option<&String> {
    self.legacy_event_type.as_ref()
  }

  pub fn reset_legacy_event_type(&mut self) {
    self.legacy_event_type = None;
  }

  pub fn set_outcome(&mut self, outcome: ::models::LogOutcome) {
    self.outcome = Some(outcome);
  }

  pub fn with_outcome(mut self, outcome: ::models::LogOutcome) -> LogEvent {
    self.outcome = Some(outcome);
    self
  }

  pub fn outcome(&self) -> Option<&::models::LogOutcome> {
    self.outcome.as_ref()
  }

  pub fn reset_outcome(&mut self) {
    self.outcome = None;
  }

  pub fn set_published(&mut self, published: String) {
    self.published = Some(published);
  }

  pub fn with_published(mut self, published: String) -> LogEvent {
    self.published = Some(published);
    self
  }

  pub fn published(&self) -> Option<&String> {
    self.published.as_ref()
  }

  pub fn reset_published(&mut self) {
    self.published = None;
  }

  pub fn set_request(&mut self, request: ::models::LogRequest) {
    self.request = Some(request);
  }

  pub fn with_request(mut self, request: ::models::LogRequest) -> LogEvent {
    self.request = Some(request);
    self
  }

  pub fn request(&self) -> Option<&::models::LogRequest> {
    self.request.as_ref()
  }

  pub fn reset_request(&mut self) {
    self.request = None;
  }

  pub fn set_security_context(&mut self, security_context: ::models::LogSecurityContext) {
    self.security_context = Some(security_context);
  }

  pub fn with_security_context(mut self, security_context: ::models::LogSecurityContext) -> LogEvent {
    self.security_context = Some(security_context);
    self
  }

  pub fn security_context(&self) -> Option<&::models::LogSecurityContext> {
    self.security_context.as_ref()
  }

  pub fn reset_security_context(&mut self) {
    self.security_context = None;
  }

  pub fn set_severity(&mut self, severity: ::models::LogSeverity) {
    self.severity = Some(severity);
  }

  pub fn with_severity(mut self, severity: ::models::LogSeverity) -> LogEvent {
    self.severity = Some(severity);
    self
  }

  pub fn severity(&self) -> Option<&::models::LogSeverity> {
    self.severity.as_ref()
  }

  pub fn reset_severity(&mut self) {
    self.severity = None;
  }

  pub fn set_target(&mut self, target: Vec<::models::LogTarget>) {
    self.target = Some(target);
  }

  pub fn with_target(mut self, target: Vec<::models::LogTarget>) -> LogEvent {
    self.target = Some(target);
    self
  }

  pub fn target(&self) -> Option<&Vec<::models::LogTarget>> {
    self.target.as_ref()
  }

  pub fn reset_target(&mut self) {
    self.target = None;
  }

  pub fn set_transaction(&mut self, transaction: ::models::LogTransaction) {
    self.transaction = Some(transaction);
  }

  pub fn with_transaction(mut self, transaction: ::models::LogTransaction) -> LogEvent {
    self.transaction = Some(transaction);
    self
  }

  pub fn transaction(&self) -> Option<&::models::LogTransaction> {
    self.transaction.as_ref()
  }

  pub fn reset_transaction(&mut self) {
    self.transaction = None;
  }

  pub fn set_uuid(&mut self, uuid: String) {
    self.uuid = Some(uuid);
  }

  pub fn with_uuid(mut self, uuid: String) -> LogEvent {
    self.uuid = Some(uuid);
    self
  }

  pub fn uuid(&self) -> Option<&String> {
    self.uuid.as_ref()
  }

  pub fn reset_uuid(&mut self) {
    self.uuid = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> LogEvent {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



