/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SchemeApplicationCredentials {
  #[serde(rename = "password")]
  password: Option<::models::PasswordCredential>,
  #[serde(rename = "revealPassword")]
  reveal_password: Option<bool>,
  #[serde(rename = "scheme")]
  scheme: Option<::models::ApplicationCredentialsScheme>,
  #[serde(rename = "signing")]
  signing: Option<::models::ApplicationCredentialsSigning>,
  #[serde(rename = "userName")]
  user_name: Option<String>
}

impl SchemeApplicationCredentials {
  pub fn new() -> SchemeApplicationCredentials {
    SchemeApplicationCredentials {
      password: None,
      reveal_password: None,
      scheme: None,
      signing: None,
      user_name: None
    }
  }

  pub fn set_password(&mut self, password: ::models::PasswordCredential) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: ::models::PasswordCredential) -> SchemeApplicationCredentials {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&::models::PasswordCredential> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_reveal_password(&mut self, reveal_password: bool) {
    self.reveal_password = Some(reveal_password);
  }

  pub fn with_reveal_password(mut self, reveal_password: bool) -> SchemeApplicationCredentials {
    self.reveal_password = Some(reveal_password);
    self
  }

  pub fn reveal_password(&self) -> Option<&bool> {
    self.reveal_password.as_ref()
  }

  pub fn reset_reveal_password(&mut self) {
    self.reveal_password = None;
  }

  pub fn set_scheme(&mut self, scheme: ::models::ApplicationCredentialsScheme) {
    self.scheme = Some(scheme);
  }

  pub fn with_scheme(mut self, scheme: ::models::ApplicationCredentialsScheme) -> SchemeApplicationCredentials {
    self.scheme = Some(scheme);
    self
  }

  pub fn scheme(&self) -> Option<&::models::ApplicationCredentialsScheme> {
    self.scheme.as_ref()
  }

  pub fn reset_scheme(&mut self) {
    self.scheme = None;
  }

  pub fn set_signing(&mut self, signing: ::models::ApplicationCredentialsSigning) {
    self.signing = Some(signing);
  }

  pub fn with_signing(mut self, signing: ::models::ApplicationCredentialsSigning) -> SchemeApplicationCredentials {
    self.signing = Some(signing);
    self
  }

  pub fn signing(&self) -> Option<&::models::ApplicationCredentialsSigning> {
    self.signing.as_ref()
  }

  pub fn reset_signing(&mut self) {
    self.signing = None;
  }

  pub fn set_user_name(&mut self, user_name: String) {
    self.user_name = Some(user_name);
  }

  pub fn with_user_name(mut self, user_name: String) -> SchemeApplicationCredentials {
    self.user_name = Some(user_name);
    self
  }

  pub fn user_name(&self) -> Option<&String> {
    self.user_name.as_ref()
  }

  pub fn reset_user_name(&mut self) {
    self.user_name = None;
  }

}



