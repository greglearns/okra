/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationCredentials {
  #[serde(rename = "signing")]
  signing: Option<::models::ApplicationCredentialsSigning>,
  #[serde(rename = "userNameTemplate")]
  user_name_template: Option<::models::ApplicationCredentialsUsernameTemplate>
}

impl ApplicationCredentials {
  pub fn new() -> ApplicationCredentials {
    ApplicationCredentials {
      signing: None,
      user_name_template: None
    }
  }

  pub fn set_signing(&mut self, signing: ::models::ApplicationCredentialsSigning) {
    self.signing = Some(signing);
  }

  pub fn with_signing(mut self, signing: ::models::ApplicationCredentialsSigning) -> ApplicationCredentials {
    self.signing = Some(signing);
    self
  }

  pub fn signing(&self) -> Option<&::models::ApplicationCredentialsSigning> {
    self.signing.as_ref()
  }

  pub fn reset_signing(&mut self) {
    self.signing = None;
  }

  pub fn set_user_name_template(&mut self, user_name_template: ::models::ApplicationCredentialsUsernameTemplate) {
    self.user_name_template = Some(user_name_template);
  }

  pub fn with_user_name_template(mut self, user_name_template: ::models::ApplicationCredentialsUsernameTemplate) -> ApplicationCredentials {
    self.user_name_template = Some(user_name_template);
    self
  }

  pub fn user_name_template(&self) -> Option<&::models::ApplicationCredentialsUsernameTemplate> {
    self.user_name_template.as_ref()
  }

  pub fn reset_user_name_template(&mut self) {
    self.user_name_template = None;
  }

}



