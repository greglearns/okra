/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SecurePasswordStoreApplicationSettingsApplication {
  #[serde(rename = "optionalField1")]
  optional_field1: Option<String>,
  #[serde(rename = "optionalField1Value")]
  optional_field1_value: Option<String>,
  #[serde(rename = "optionalField2")]
  optional_field2: Option<String>,
  #[serde(rename = "optionalField2Value")]
  optional_field2_value: Option<String>,
  #[serde(rename = "optionalField3")]
  optional_field3: Option<String>,
  #[serde(rename = "optionalField3Value")]
  optional_field3_value: Option<String>,
  #[serde(rename = "passwordField")]
  password_field: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "usernameField")]
  username_field: Option<String>
}

impl SecurePasswordStoreApplicationSettingsApplication {
  pub fn new() -> SecurePasswordStoreApplicationSettingsApplication {
    SecurePasswordStoreApplicationSettingsApplication {
      optional_field1: None,
      optional_field1_value: None,
      optional_field2: None,
      optional_field2_value: None,
      optional_field3: None,
      optional_field3_value: None,
      password_field: None,
      url: None,
      username_field: None
    }
  }

  pub fn set_optional_field1(&mut self, optional_field1: String) {
    self.optional_field1 = Some(optional_field1);
  }

  pub fn with_optional_field1(mut self, optional_field1: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.optional_field1 = Some(optional_field1);
    self
  }

  pub fn optional_field1(&self) -> Option<&String> {
    self.optional_field1.as_ref()
  }

  pub fn reset_optional_field1(&mut self) {
    self.optional_field1 = None;
  }

  pub fn set_optional_field1_value(&mut self, optional_field1_value: String) {
    self.optional_field1_value = Some(optional_field1_value);
  }

  pub fn with_optional_field1_value(mut self, optional_field1_value: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.optional_field1_value = Some(optional_field1_value);
    self
  }

  pub fn optional_field1_value(&self) -> Option<&String> {
    self.optional_field1_value.as_ref()
  }

  pub fn reset_optional_field1_value(&mut self) {
    self.optional_field1_value = None;
  }

  pub fn set_optional_field2(&mut self, optional_field2: String) {
    self.optional_field2 = Some(optional_field2);
  }

  pub fn with_optional_field2(mut self, optional_field2: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.optional_field2 = Some(optional_field2);
    self
  }

  pub fn optional_field2(&self) -> Option<&String> {
    self.optional_field2.as_ref()
  }

  pub fn reset_optional_field2(&mut self) {
    self.optional_field2 = None;
  }

  pub fn set_optional_field2_value(&mut self, optional_field2_value: String) {
    self.optional_field2_value = Some(optional_field2_value);
  }

  pub fn with_optional_field2_value(mut self, optional_field2_value: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.optional_field2_value = Some(optional_field2_value);
    self
  }

  pub fn optional_field2_value(&self) -> Option<&String> {
    self.optional_field2_value.as_ref()
  }

  pub fn reset_optional_field2_value(&mut self) {
    self.optional_field2_value = None;
  }

  pub fn set_optional_field3(&mut self, optional_field3: String) {
    self.optional_field3 = Some(optional_field3);
  }

  pub fn with_optional_field3(mut self, optional_field3: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.optional_field3 = Some(optional_field3);
    self
  }

  pub fn optional_field3(&self) -> Option<&String> {
    self.optional_field3.as_ref()
  }

  pub fn reset_optional_field3(&mut self) {
    self.optional_field3 = None;
  }

  pub fn set_optional_field3_value(&mut self, optional_field3_value: String) {
    self.optional_field3_value = Some(optional_field3_value);
  }

  pub fn with_optional_field3_value(mut self, optional_field3_value: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.optional_field3_value = Some(optional_field3_value);
    self
  }

  pub fn optional_field3_value(&self) -> Option<&String> {
    self.optional_field3_value.as_ref()
  }

  pub fn reset_optional_field3_value(&mut self) {
    self.optional_field3_value = None;
  }

  pub fn set_password_field(&mut self, password_field: String) {
    self.password_field = Some(password_field);
  }

  pub fn with_password_field(mut self, password_field: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.password_field = Some(password_field);
    self
  }

  pub fn password_field(&self) -> Option<&String> {
    self.password_field.as_ref()
  }

  pub fn reset_password_field(&mut self) {
    self.password_field = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_username_field(&mut self, username_field: String) {
    self.username_field = Some(username_field);
  }

  pub fn with_username_field(mut self, username_field: String) -> SecurePasswordStoreApplicationSettingsApplication {
    self.username_field = Some(username_field);
    self
  }

  pub fn username_field(&self) -> Option<&String> {
    self.username_field.as_ref()
  }

  pub fn reset_username_field(&mut self) {
    self.username_field = None;
  }

}



