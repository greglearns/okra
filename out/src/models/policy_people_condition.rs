/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PolicyPeopleCondition {
  #[serde(rename = "groups")]
  groups: Option<::models::GroupCondition>,
  #[serde(rename = "users")]
  users: Option<::models::UserCondition>
}

impl PolicyPeopleCondition {
  pub fn new() -> PolicyPeopleCondition {
    PolicyPeopleCondition {
      groups: None,
      users: None
    }
  }

  pub fn set_groups(&mut self, groups: ::models::GroupCondition) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: ::models::GroupCondition) -> PolicyPeopleCondition {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&::models::GroupCondition> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_users(&mut self, users: ::models::UserCondition) {
    self.users = Some(users);
  }

  pub fn with_users(mut self, users: ::models::UserCondition) -> PolicyPeopleCondition {
    self.users = Some(users);
    self
  }

  pub fn users(&self) -> Option<&::models::UserCondition> {
    self.users.as_ref()
  }

  pub fn reset_users(&mut self) {
    self.users = None;
  }

}



