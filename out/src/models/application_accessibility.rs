/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationAccessibility {
  #[serde(rename = "errorRedirectUrl")]
  error_redirect_url: Option<String>,
  #[serde(rename = "loginRedirectUrl")]
  login_redirect_url: Option<String>,
  #[serde(rename = "selfService")]
  self_service: Option<bool>
}

impl ApplicationAccessibility {
  pub fn new() -> ApplicationAccessibility {
    ApplicationAccessibility {
      error_redirect_url: None,
      login_redirect_url: None,
      self_service: None
    }
  }

  pub fn set_error_redirect_url(&mut self, error_redirect_url: String) {
    self.error_redirect_url = Some(error_redirect_url);
  }

  pub fn with_error_redirect_url(mut self, error_redirect_url: String) -> ApplicationAccessibility {
    self.error_redirect_url = Some(error_redirect_url);
    self
  }

  pub fn error_redirect_url(&self) -> Option<&String> {
    self.error_redirect_url.as_ref()
  }

  pub fn reset_error_redirect_url(&mut self) {
    self.error_redirect_url = None;
  }

  pub fn set_login_redirect_url(&mut self, login_redirect_url: String) {
    self.login_redirect_url = Some(login_redirect_url);
  }

  pub fn with_login_redirect_url(mut self, login_redirect_url: String) -> ApplicationAccessibility {
    self.login_redirect_url = Some(login_redirect_url);
    self
  }

  pub fn login_redirect_url(&self) -> Option<&String> {
    self.login_redirect_url.as_ref()
  }

  pub fn reset_login_redirect_url(&mut self) {
    self.login_redirect_url = None;
  }

  pub fn set_self_service(&mut self, self_service: bool) {
    self.self_service = Some(self_service);
  }

  pub fn with_self_service(mut self, self_service: bool) -> ApplicationAccessibility {
    self.self_service = Some(self_service);
    self
  }

  pub fn self_service(&self) -> Option<&bool> {
    self.self_service.as_ref()
  }

  pub fn reset_self_service(&mut self) {
    self.self_service = None;
  }

}



