/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwaThreeFieldApplicationSettingsApplication {
  #[serde(rename = "buttonSelector")]
  button_selector: Option<String>,
  #[serde(rename = "extraFieldSelector")]
  extra_field_selector: Option<String>,
  #[serde(rename = "extraFieldValue")]
  extra_field_value: Option<String>,
  #[serde(rename = "loginUrlRegex")]
  login_url_regex: Option<String>,
  #[serde(rename = "passwordSelector")]
  password_selector: Option<String>,
  #[serde(rename = "targetUrl")]
  target_url: Option<String>,
  #[serde(rename = "userNameSelector")]
  user_name_selector: Option<String>
}

impl SwaThreeFieldApplicationSettingsApplication {
  pub fn new() -> SwaThreeFieldApplicationSettingsApplication {
    SwaThreeFieldApplicationSettingsApplication {
      button_selector: None,
      extra_field_selector: None,
      extra_field_value: None,
      login_url_regex: None,
      password_selector: None,
      target_url: None,
      user_name_selector: None
    }
  }

  pub fn set_button_selector(&mut self, button_selector: String) {
    self.button_selector = Some(button_selector);
  }

  pub fn with_button_selector(mut self, button_selector: String) -> SwaThreeFieldApplicationSettingsApplication {
    self.button_selector = Some(button_selector);
    self
  }

  pub fn button_selector(&self) -> Option<&String> {
    self.button_selector.as_ref()
  }

  pub fn reset_button_selector(&mut self) {
    self.button_selector = None;
  }

  pub fn set_extra_field_selector(&mut self, extra_field_selector: String) {
    self.extra_field_selector = Some(extra_field_selector);
  }

  pub fn with_extra_field_selector(mut self, extra_field_selector: String) -> SwaThreeFieldApplicationSettingsApplication {
    self.extra_field_selector = Some(extra_field_selector);
    self
  }

  pub fn extra_field_selector(&self) -> Option<&String> {
    self.extra_field_selector.as_ref()
  }

  pub fn reset_extra_field_selector(&mut self) {
    self.extra_field_selector = None;
  }

  pub fn set_extra_field_value(&mut self, extra_field_value: String) {
    self.extra_field_value = Some(extra_field_value);
  }

  pub fn with_extra_field_value(mut self, extra_field_value: String) -> SwaThreeFieldApplicationSettingsApplication {
    self.extra_field_value = Some(extra_field_value);
    self
  }

  pub fn extra_field_value(&self) -> Option<&String> {
    self.extra_field_value.as_ref()
  }

  pub fn reset_extra_field_value(&mut self) {
    self.extra_field_value = None;
  }

  pub fn set_login_url_regex(&mut self, login_url_regex: String) {
    self.login_url_regex = Some(login_url_regex);
  }

  pub fn with_login_url_regex(mut self, login_url_regex: String) -> SwaThreeFieldApplicationSettingsApplication {
    self.login_url_regex = Some(login_url_regex);
    self
  }

  pub fn login_url_regex(&self) -> Option<&String> {
    self.login_url_regex.as_ref()
  }

  pub fn reset_login_url_regex(&mut self) {
    self.login_url_regex = None;
  }

  pub fn set_password_selector(&mut self, password_selector: String) {
    self.password_selector = Some(password_selector);
  }

  pub fn with_password_selector(mut self, password_selector: String) -> SwaThreeFieldApplicationSettingsApplication {
    self.password_selector = Some(password_selector);
    self
  }

  pub fn password_selector(&self) -> Option<&String> {
    self.password_selector.as_ref()
  }

  pub fn reset_password_selector(&mut self) {
    self.password_selector = None;
  }

  pub fn set_target_url(&mut self, target_url: String) {
    self.target_url = Some(target_url);
  }

  pub fn with_target_url(mut self, target_url: String) -> SwaThreeFieldApplicationSettingsApplication {
    self.target_url = Some(target_url);
    self
  }

  pub fn target_url(&self) -> Option<&String> {
    self.target_url.as_ref()
  }

  pub fn reset_target_url(&mut self) {
    self.target_url = None;
  }

  pub fn set_user_name_selector(&mut self, user_name_selector: String) {
    self.user_name_selector = Some(user_name_selector);
  }

  pub fn with_user_name_selector(mut self, user_name_selector: String) -> SwaThreeFieldApplicationSettingsApplication {
    self.user_name_selector = Some(user_name_selector);
    self
  }

  pub fn user_name_selector(&self) -> Option<&String> {
    self.user_name_selector.as_ref()
  }

  pub fn reset_user_name_selector(&mut self) {
    self.user_name_selector = None;
  }

}



