/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OpenIdConnectApplicationSettingsClient {
  #[serde(rename = "application_type")]
  application_type: Option<::models::OpenIdConnectApplicationType>,
  #[serde(rename = "client_uri")]
  client_uri: Option<String>,
  #[serde(rename = "consent_method")]
  consent_method: Option<::models::OpenIdConnectApplicationConsentMethod>,
  #[serde(rename = "grant_types")]
  grant_types: Option<Vec<::models::OAuthGrantType>>,
  #[serde(rename = "logo_uri")]
  logo_uri: Option<String>,
  #[serde(rename = "policy_uri")]
  policy_uri: Option<String>,
  #[serde(rename = "redirect_uris")]
  redirect_uris: Option<Vec<String>>,
  #[serde(rename = "response_types")]
  response_types: Option<Vec<::models::OAuthResponseType>>,
  #[serde(rename = "tos_uri")]
  tos_uri: Option<String>
}

impl OpenIdConnectApplicationSettingsClient {
  pub fn new() -> OpenIdConnectApplicationSettingsClient {
    OpenIdConnectApplicationSettingsClient {
      application_type: None,
      client_uri: None,
      consent_method: None,
      grant_types: None,
      logo_uri: None,
      policy_uri: None,
      redirect_uris: None,
      response_types: None,
      tos_uri: None
    }
  }

  pub fn set_application_type(&mut self, application_type: ::models::OpenIdConnectApplicationType) {
    self.application_type = Some(application_type);
  }

  pub fn with_application_type(mut self, application_type: ::models::OpenIdConnectApplicationType) -> OpenIdConnectApplicationSettingsClient {
    self.application_type = Some(application_type);
    self
  }

  pub fn application_type(&self) -> Option<&::models::OpenIdConnectApplicationType> {
    self.application_type.as_ref()
  }

  pub fn reset_application_type(&mut self) {
    self.application_type = None;
  }

  pub fn set_client_uri(&mut self, client_uri: String) {
    self.client_uri = Some(client_uri);
  }

  pub fn with_client_uri(mut self, client_uri: String) -> OpenIdConnectApplicationSettingsClient {
    self.client_uri = Some(client_uri);
    self
  }

  pub fn client_uri(&self) -> Option<&String> {
    self.client_uri.as_ref()
  }

  pub fn reset_client_uri(&mut self) {
    self.client_uri = None;
  }

  pub fn set_consent_method(&mut self, consent_method: ::models::OpenIdConnectApplicationConsentMethod) {
    self.consent_method = Some(consent_method);
  }

  pub fn with_consent_method(mut self, consent_method: ::models::OpenIdConnectApplicationConsentMethod) -> OpenIdConnectApplicationSettingsClient {
    self.consent_method = Some(consent_method);
    self
  }

  pub fn consent_method(&self) -> Option<&::models::OpenIdConnectApplicationConsentMethod> {
    self.consent_method.as_ref()
  }

  pub fn reset_consent_method(&mut self) {
    self.consent_method = None;
  }

  pub fn set_grant_types(&mut self, grant_types: Vec<::models::OAuthGrantType>) {
    self.grant_types = Some(grant_types);
  }

  pub fn with_grant_types(mut self, grant_types: Vec<::models::OAuthGrantType>) -> OpenIdConnectApplicationSettingsClient {
    self.grant_types = Some(grant_types);
    self
  }

  pub fn grant_types(&self) -> Option<&Vec<::models::OAuthGrantType>> {
    self.grant_types.as_ref()
  }

  pub fn reset_grant_types(&mut self) {
    self.grant_types = None;
  }

  pub fn set_logo_uri(&mut self, logo_uri: String) {
    self.logo_uri = Some(logo_uri);
  }

  pub fn with_logo_uri(mut self, logo_uri: String) -> OpenIdConnectApplicationSettingsClient {
    self.logo_uri = Some(logo_uri);
    self
  }

  pub fn logo_uri(&self) -> Option<&String> {
    self.logo_uri.as_ref()
  }

  pub fn reset_logo_uri(&mut self) {
    self.logo_uri = None;
  }

  pub fn set_policy_uri(&mut self, policy_uri: String) {
    self.policy_uri = Some(policy_uri);
  }

  pub fn with_policy_uri(mut self, policy_uri: String) -> OpenIdConnectApplicationSettingsClient {
    self.policy_uri = Some(policy_uri);
    self
  }

  pub fn policy_uri(&self) -> Option<&String> {
    self.policy_uri.as_ref()
  }

  pub fn reset_policy_uri(&mut self) {
    self.policy_uri = None;
  }

  pub fn set_redirect_uris(&mut self, redirect_uris: Vec<String>) {
    self.redirect_uris = Some(redirect_uris);
  }

  pub fn with_redirect_uris(mut self, redirect_uris: Vec<String>) -> OpenIdConnectApplicationSettingsClient {
    self.redirect_uris = Some(redirect_uris);
    self
  }

  pub fn redirect_uris(&self) -> Option<&Vec<String>> {
    self.redirect_uris.as_ref()
  }

  pub fn reset_redirect_uris(&mut self) {
    self.redirect_uris = None;
  }

  pub fn set_response_types(&mut self, response_types: Vec<::models::OAuthResponseType>) {
    self.response_types = Some(response_types);
  }

  pub fn with_response_types(mut self, response_types: Vec<::models::OAuthResponseType>) -> OpenIdConnectApplicationSettingsClient {
    self.response_types = Some(response_types);
    self
  }

  pub fn response_types(&self) -> Option<&Vec<::models::OAuthResponseType>> {
    self.response_types.as_ref()
  }

  pub fn reset_response_types(&mut self) {
    self.response_types = None;
  }

  pub fn set_tos_uri(&mut self, tos_uri: String) {
    self.tos_uri = Some(tos_uri);
  }

  pub fn with_tos_uri(mut self, tos_uri: String) -> OpenIdConnectApplicationSettingsClient {
    self.tos_uri = Some(tos_uri);
    self
  }

  pub fn tos_uri(&self) -> Option<&String> {
    self.tos_uri.as_ref()
  }

  pub fn reset_tos_uri(&mut self) {
    self.tos_uri = None;
  }

}



