/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwaThreeFieldApplication {
  #[serde(rename = "name")]
  name: Option<Value>,
  #[serde(rename = "settings")]
  settings: Option<::models::SwaThreeFieldApplicationSettings>
}

impl SwaThreeFieldApplication {
  pub fn new() -> SwaThreeFieldApplication {
    SwaThreeFieldApplication {
      name: None,
      settings: None
    }
  }

  pub fn set_name(&mut self, name: Value) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: Value) -> SwaThreeFieldApplication {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&Value> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_settings(&mut self, settings: ::models::SwaThreeFieldApplicationSettings) {
    self.settings = Some(settings);
  }

  pub fn with_settings(mut self, settings: ::models::SwaThreeFieldApplicationSettings) -> SwaThreeFieldApplication {
    self.settings = Some(settings);
    self
  }

  pub fn settings(&self) -> Option<&::models::SwaThreeFieldApplicationSettings> {
    self.settings.as_ref()
  }

  pub fn reset_settings(&mut self) {
    self.settings = None;
  }

}



