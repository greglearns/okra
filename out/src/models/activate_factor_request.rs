/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivateFactorRequest {
  #[serde(rename = "stateToken")]
  state_token: Option<String>,
  #[serde(rename = "passCode")]
  pass_code: Option<String>,
  #[serde(rename = "registrationData")]
  registration_data: Option<String>,
  #[serde(rename = "clientData")]
  client_data: Option<String>
}

impl ActivateFactorRequest {
  pub fn new() -> ActivateFactorRequest {
    ActivateFactorRequest {
      state_token: None,
      pass_code: None,
      registration_data: None,
      client_data: None
    }
  }

  pub fn set_state_token(&mut self, state_token: String) {
    self.state_token = Some(state_token);
  }

  pub fn with_state_token(mut self, state_token: String) -> ActivateFactorRequest {
    self.state_token = Some(state_token);
    self
  }

  pub fn state_token(&self) -> Option<&String> {
    self.state_token.as_ref()
  }

  pub fn reset_state_token(&mut self) {
    self.state_token = None;
  }

  pub fn set_pass_code(&mut self, pass_code: String) {
    self.pass_code = Some(pass_code);
  }

  pub fn with_pass_code(mut self, pass_code: String) -> ActivateFactorRequest {
    self.pass_code = Some(pass_code);
    self
  }

  pub fn pass_code(&self) -> Option<&String> {
    self.pass_code.as_ref()
  }

  pub fn reset_pass_code(&mut self) {
    self.pass_code = None;
  }

  pub fn set_registration_data(&mut self, registration_data: String) {
    self.registration_data = Some(registration_data);
  }

  pub fn with_registration_data(mut self, registration_data: String) -> ActivateFactorRequest {
    self.registration_data = Some(registration_data);
    self
  }

  pub fn registration_data(&self) -> Option<&String> {
    self.registration_data.as_ref()
  }

  pub fn reset_registration_data(&mut self) {
    self.registration_data = None;
  }

  pub fn set_client_data(&mut self, client_data: String) {
    self.client_data = Some(client_data);
  }

  pub fn with_client_data(mut self, client_data: String) -> ActivateFactorRequest {
    self.client_data = Some(client_data);
    self
  }

  pub fn client_data(&self) -> Option<&String> {
    self.client_data.as_ref()
  }

  pub fn reset_client_data(&mut self) {
    self.client_data = None;
  }

}



