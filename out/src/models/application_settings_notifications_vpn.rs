/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationSettingsNotificationsVpn {
  #[serde(rename = "helpUrl")]
  help_url: Option<String>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "network")]
  network: Option<::models::ApplicationSettingsNotificationsVpnNetwork>
}

impl ApplicationSettingsNotificationsVpn {
  pub fn new() -> ApplicationSettingsNotificationsVpn {
    ApplicationSettingsNotificationsVpn {
      help_url: None,
      message: None,
      network: None
    }
  }

  pub fn set_help_url(&mut self, help_url: String) {
    self.help_url = Some(help_url);
  }

  pub fn with_help_url(mut self, help_url: String) -> ApplicationSettingsNotificationsVpn {
    self.help_url = Some(help_url);
    self
  }

  pub fn help_url(&self) -> Option<&String> {
    self.help_url.as_ref()
  }

  pub fn reset_help_url(&mut self) {
    self.help_url = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> ApplicationSettingsNotificationsVpn {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_network(&mut self, network: ::models::ApplicationSettingsNotificationsVpnNetwork) {
    self.network = Some(network);
  }

  pub fn with_network(mut self, network: ::models::ApplicationSettingsNotificationsVpnNetwork) -> ApplicationSettingsNotificationsVpn {
    self.network = Some(network);
    self
  }

  pub fn network(&self) -> Option<&::models::ApplicationSettingsNotificationsVpnNetwork> {
    self.network.as_ref()
  }

  pub fn reset_network(&mut self) {
    self.network = None;
  }

}



