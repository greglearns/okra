/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PolicyRuleAuthContextCondition {
  #[serde(rename = "authType")]
  auth_type: Option<String>
}

impl PolicyRuleAuthContextCondition {
  pub fn new() -> PolicyRuleAuthContextCondition {
    PolicyRuleAuthContextCondition {
      auth_type: None
    }
  }

  pub fn set_auth_type(&mut self, auth_type: String) {
    self.auth_type = Some(auth_type);
  }

  pub fn with_auth_type(mut self, auth_type: String) -> PolicyRuleAuthContextCondition {
    self.auth_type = Some(auth_type);
    self
  }

  pub fn auth_type(&self) -> Option<&String> {
    self.auth_type.as_ref()
  }

  pub fn reset_auth_type(&mut self) {
    self.auth_type = None;
  }

}



