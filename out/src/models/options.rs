/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Options {
  #[serde(rename = "multiOptionalFactorEnroll")]
  multi_optional_factor_enroll: Option<bool>,
  #[serde(rename = "warnBeforePasswordExpired")]
  warn_before_password_expired: Option<bool>
}

impl Options {
  pub fn new() -> Options {
    Options {
      multi_optional_factor_enroll: None,
      warn_before_password_expired: None
    }
  }

  pub fn set_multi_optional_factor_enroll(&mut self, multi_optional_factor_enroll: bool) {
    self.multi_optional_factor_enroll = Some(multi_optional_factor_enroll);
  }

  pub fn with_multi_optional_factor_enroll(mut self, multi_optional_factor_enroll: bool) -> Options {
    self.multi_optional_factor_enroll = Some(multi_optional_factor_enroll);
    self
  }

  pub fn multi_optional_factor_enroll(&self) -> Option<&bool> {
    self.multi_optional_factor_enroll.as_ref()
  }

  pub fn reset_multi_optional_factor_enroll(&mut self) {
    self.multi_optional_factor_enroll = None;
  }

  pub fn set_warn_before_password_expired(&mut self, warn_before_password_expired: bool) {
    self.warn_before_password_expired = Some(warn_before_password_expired);
  }

  pub fn with_warn_before_password_expired(mut self, warn_before_password_expired: bool) -> Options {
    self.warn_before_password_expired = Some(warn_before_password_expired);
    self
  }

  pub fn warn_before_password_expired(&self) -> Option<&bool> {
    self.warn_before_password_expired.as_ref()
  }

  pub fn reset_warn_before_password_expired(&mut self) {
    self.warn_before_password_expired = None;
  }

}



