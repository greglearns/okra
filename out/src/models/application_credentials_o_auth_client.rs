/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 1.9.0
 * Contact: devex-public@okta.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApplicationCredentialsOAuthClient {
  #[serde(rename = "autoKeyRotation")]
  auto_key_rotation: Option<bool>,
  #[serde(rename = "client_id")]
  client_id: Option<String>,
  #[serde(rename = "client_secret")]
  client_secret: Option<String>,
  #[serde(rename = "token_endpoint_auth_method")]
  token_endpoint_auth_method: Option<::models::OAuthEndpointAuthenticationMethod>
}

impl ApplicationCredentialsOAuthClient {
  pub fn new() -> ApplicationCredentialsOAuthClient {
    ApplicationCredentialsOAuthClient {
      auto_key_rotation: None,
      client_id: None,
      client_secret: None,
      token_endpoint_auth_method: None
    }
  }

  pub fn set_auto_key_rotation(&mut self, auto_key_rotation: bool) {
    self.auto_key_rotation = Some(auto_key_rotation);
  }

  pub fn with_auto_key_rotation(mut self, auto_key_rotation: bool) -> ApplicationCredentialsOAuthClient {
    self.auto_key_rotation = Some(auto_key_rotation);
    self
  }

  pub fn auto_key_rotation(&self) -> Option<&bool> {
    self.auto_key_rotation.as_ref()
  }

  pub fn reset_auto_key_rotation(&mut self) {
    self.auto_key_rotation = None;
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> ApplicationCredentialsOAuthClient {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_client_secret(&mut self, client_secret: String) {
    self.client_secret = Some(client_secret);
  }

  pub fn with_client_secret(mut self, client_secret: String) -> ApplicationCredentialsOAuthClient {
    self.client_secret = Some(client_secret);
    self
  }

  pub fn client_secret(&self) -> Option<&String> {
    self.client_secret.as_ref()
  }

  pub fn reset_client_secret(&mut self) {
    self.client_secret = None;
  }

  pub fn set_token_endpoint_auth_method(&mut self, token_endpoint_auth_method: ::models::OAuthEndpointAuthenticationMethod) {
    self.token_endpoint_auth_method = Some(token_endpoint_auth_method);
  }

  pub fn with_token_endpoint_auth_method(mut self, token_endpoint_auth_method: ::models::OAuthEndpointAuthenticationMethod) -> ApplicationCredentialsOAuthClient {
    self.token_endpoint_auth_method = Some(token_endpoint_auth_method);
    self
  }

  pub fn token_endpoint_auth_method(&self) -> Option<&::models::OAuthEndpointAuthenticationMethod> {
    self.token_endpoint_auth_method.as_ref()
  }

  pub fn reset_token_endpoint_auth_method(&mut self) {
    self.token_endpoint_auth_method = None;
  }

}



